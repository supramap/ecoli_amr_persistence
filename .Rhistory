library(jsonlite)
library(stringr)
library(dplyr)
library(tidyr)
library(arules)
## Generate New Extract from the NcBI Database
#json.stream <- fromJSON("https://www.ncbi.nlm.nih.gov/pathogens/ngram?start=0&limit=100000&q=%5Bdisplay()%2Chist(geo_loc_name%2Cisolation_source%2Ccollected_by%2Chost%2Cproperty%2Ctarget_creation_date)%5D.from(pathogen).usingschema(%2Fschema%2Fpathogen).matching(status%3D%3D%5B%22current%22%5D+and+q%3D%3D%22taxgroup_name%253A%2522E.coli%2520and%2520Shigella%2522%22).sort(target_creation_date%2Cdesc)&_search=false&rows=20&page=1&sidx=target_creation_date&sord=desc)")
#saveRDS(json.stream, file = "json.stream.RDS")
## Read in Data
json.stream <- readRDS("e.coli.RDS")
getwd()
data <- read.csv("Downloads/AMR_FunctionalMechanisms.csv")
setwd("~/Documents/ecoli_amr_persistence")
library(dplyr)
data <- read.csv("Downloads/AMR_FunctionalMechanisms.csv")
data <- read.csv("AMR_FunctionalMechanisms.csv")
View(data)
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
View(GCSSbyType)
gc <- GCSSbyType %>% filter(GC.SS == "GC")
ss <- GCSSbyType %>% filter(GC.SS == "SS")
GCSSbyType_wt <- wilcox.test(gc$n,
ss$n,
alternative = "two.sided",
paired = TRUE)
View(GCSSbyType_wt)
View(gc)
View(ss)
View(GCSSbyType_wt)
p.adjust(GCSSbyType_wt$p.value,
method = "bonferroni",
n = nrow(gc))
######################
## GC/SS by Resistance Mechanism
GCSSbyRM <- data %>% group_by(GC.SS, Resistance.Mechanism, .drop = FALSE) %>% tally()
gc <- GCSSbyRM %>% filter(GC.SS == "GC")
ss <- GCSSbyRM %>% filter(GC.SS == "SS")
View(GCSSbyRM)
GCSSbyRM_wt <- wilcox.test(gc$n,
ss$n,
alternative = "two.sided",
paired = TRUE)
View(GCSSbyRM_wt)
View(GCSSbyRM)
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
GCSSbyType$Pct <- GCSSbyType$n/sum(GCSSbyType$n)
View(GCSSbyType)
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
View(ss)
GCSSbyType_wt <- wilcox.test(gc$pct,
ss$pct,
alternative = "two.sided",
paired = TRUE)
View(GCSSbyType_wt)
View(ss)
View(gc)
View(ss)
GCSSbyType_ks <- ks.test(gc$pct,
ss$pct,
alternative = "two.sided")
View(GCSSbyType_ks)
GCSSbyType_ks <- ks.test(gc$n,
ss$n,
alternative = "two.sided")
View(GCSSbyType_ks)
GCSSbyType_ks <- ks.test(gc$n,
ss$n,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyType_ks)
View(GCSSbyType_wt)
GCSSbyType_wt <- wilcox.test(gc$n,
ss$n,
alternative = "two.sided",
paired = TRUE)
View(GCSSbyType_wt)
GCSSbyType_ks <- ks.test(gc$n,
ss$n,
alternative = "two.sided",
exact = TRUE)
######################
## GC/SS by Resistance Mechanism
GCSSbyRM <- data %>% group_by(GC.SS, Resistance.Mechanism, .drop = FALSE) %>% tally()
gc <- GCSSbyRM %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyRM %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyRM_ks <- ks.test(gc$pct,
ss$pct,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyRM_ks)
View(GCSSbyRM)
View(data)
View(GCSSbyType_ks)
View(GCSSbyRM_ks)
