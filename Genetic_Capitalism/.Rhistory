"TBD"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
p <- ggplot(data, aes(Type,  fill = GC.SS)) +
geom_bar(position="dodge") +
scale_fill_npg()
ggplotly(p)
library(ggsci)
install.packages("ggsci")
library(ggsci)
p <- ggplot(data, aes(Type,  fill = GC.SS)) +
geom_bar(position="dodge") +
scale_fill_npg()
ggplotly(p)
## For all 3 categories: GC, SS, TBD
GCSSbyType_ft <- fisher.test(matrix(c(gc$n,
ss$n,
tbd$n),
3,
6,
byrow=TRUE,
dimnames = list(classification=c("GC",
"SS",
"TBD"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally()
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
tbd <- GCSSbyType %>% filter(GC.SS == "TBD")
tbd$pct <- tbd$n/sum(tbd$n)
## For all 3 categories: GC, SS, TBD
GCSSbyType_ft <- fisher.test(matrix(c(gc$n,
ss$n,
tbd$n),
3,
6,
byrow=TRUE,
dimnames = list(classification=c("GC",
"SS",
"TBD"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
data <- read.csv("AMR_FunctionalMechanisms.csv")
## Remove blaEC & blaEC-5
data <- data %>% filter(!AMR.Gene %in% c("blaEC", "blaEC-5"))
## Read in new clusters
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$cluster
View(data)
data <- read.csv("AMR_FunctionalMechanisms.csv")
## Remove blaEC & blaEC-5
data <- data %>% filter(!AMR.Gene %in% c("blaEC", "blaEC-5"))
## Read in new clusters
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$cluster
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally()
View(GCSSbyType)
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type) %>%
tally(.drop = FALSE)
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally(.drop = FALSE)
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally()
View(GCSSbyType)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally()
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
data <- read.csv("AMR_FunctionalMechanisms.csv")
## Remove blaEC & blaEC-5
data <- data %>% filter(!AMR.Gene %in% c("blaEC", "blaEC-5"))
## Read in new clusters
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$cluster
library(dplyr)
library(ggplot2)
library(plotly)
library(ggsci)
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally()
View(GCSSbyType)
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type) %>% tally()
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop=FALSE) %>% tally()
data %>% group_by(GC.SS, Type, .drop=FALSE)
GCSSbyType <- data %>% group_by(GC.SS, Type) %>% count(.drop=FALSE)
View(GCSSbyType)
library(dplyr)
library(ggplot2)
library(plotly)
library(ggsci)
data <- read.csv("AMR_FunctionalMechanisms.csv")
## Remove blaEC & blaEC-5
data <- data %>% filter(!AMR.Gene %in% c("blaEC", "blaEC-5"))
## Read in new clusters
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$cluster
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop=FALSE) %>% tally()
View(GCSSbyType)
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
tbd <- GCSSbyType %>% filter(GC.SS == "TBD")
tbd$pct <- tbd$n/sum(tbd$n)
## For all 3 categories: GC, SS, TBD
GCSSbyType_ft <- fisher.test(matrix(c(gc$n,
ss$n,
tbd$n),
3,
6,
byrow=TRUE,
dimnames = list(classification=c("GC",
"SS",
"TBD"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
## For all 3 categories: GC, SS, TBD
GCSSbyType_ft_3 <- fisher.test(matrix(c(gc$n,
ss$n,
tbd$n),
3,
6,
byrow=TRUE,
dimnames = list(classification=c("GC",
"SS",
"TBD"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
## For all 2 categories: GC, SS
GCSSbyType_ft_2 <- fisher.test(matrix(c(gc$n,
ss$n),
2,
6,
byrow=TRUE,
dimnames = list(classification=c("GC",
"SS"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
View(GCSSbyType_ft_3)
View(GCSSbyType_ft_3)
GCSSbyType_ft_3[["method"]]
View(GCSSbyType_ft_2)
library(dplyr)
## Get Genotype Counts
pdt <- unique(names(read.csv("e.coli.ids")))
json.stream <- readRDS("TNTFileGenerator/e.coli.RDS")
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
fgenotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(fgenotypes) <- id
rgenotypes <- fgenotypes
rgenotypes[!(names(fgenotypes) %in% pdt)] <- NULL
genotypesall <- unique(sort(unlist(rgenotypes)))
genobinv <- lapply(rgenotypes, function(x){(genotypesall %in% x) * 1})
gdf <- as.data.frame(matrix(unlist(genobinv), ncol = length(genotypesall), byrow = T))
names(gdf) <- genotypesall
counts <- as.data.frame(colSums(gdf))
colnames(counts) <- "Isolate_Count"
counts$Genotype <- rownames(counts)
## Read in Gain and Loss Data
data <- read.csv("gainloss_counts.csv")
data <- merge(data, counts, by = "Genotype")
## Remove blaEC & blaEC-5 (outliers)
data <- data %>% filter(!Genotype %in% c("blaEC", "blaEC-5"))
## Calculate rate columns, net_gain, and net_loss
# data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
# data$gain_rate <- data$Gain/data$Isolate_Count
# data$loss_rate <- data$Loss/data$Isolate_Count
data$rate <- data$Isolate_Count/(data$Gain-data$Loss)
data$net_gain <- scale(data$Gain * data$rate)[,1]
data$net_loss <- scale(data$Loss * data$rate)[,1]
############
## k-Means Analysis
library(mclust)
set.seed(1337)
meanclust <- Mclust(data[,6:7])
data$cluster <- factor(meanclust$classification)
cluster_counts <- data %>%
group_by(cluster) %>%
tally()
data <- data %>% mutate(cluster_name = case_when(cluster == 1 ~ "TBD",
cluster %in% c(2,3,5) ~ "GC",
cluster %in% c(4,6) ~ "SS"))
View(data)
write.csv(data, "clusters.csv")
## Get Genotype Counts
pdt <- unique(names(read.csv("e.coli.ids")))
json.stream <- readRDS("TNTFileGenerator/e.coli.RDS")
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
fgenotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(fgenotypes) <- id
rgenotypes <- fgenotypes
rgenotypes[!(names(fgenotypes) %in% pdt)] <- NULL
genotypesall <- unique(sort(unlist(rgenotypes)))
genobinv <- lapply(rgenotypes, function(x){(genotypesall %in% x) * 1})
gdf <- as.data.frame(matrix(unlist(genobinv), ncol = length(genotypesall), byrow = T))
names(gdf) <- genotypesall
counts <- as.data.frame(colSums(gdf))
colnames(counts) <- "Isolate_Count"
counts$Genotype <- rownames(counts)
## Read in Gain and Loss Data
data <- read.csv("gainloss_counts.csv")
data <- merge(data, counts, by = "Genotype")
pwt <- data %>% filter(Genotype %in% c("blaEC", "blaEC-5"))
View(pwt)
pwt$rate <- data$Isolate_Count/(data$Gain-data$Loss)
pwt$net_gain <- scale(data$Gain * data$rate)[,1]
pwt$net_loss <- scale(data$Loss * data$rate)[,1]
pwt$cluster <- NA
pwt <- data %>% filter(Genotype %in% c("blaEC", "blaEC-5"))
pwt$rate <- pwt$Isolate_Count/(pwt$Gain-data$Loss)
pwt$net_gain <- scale(pwt$Gain * pwt$rate)[,1]
pwt$net_loss <- scale(pwt$Loss * pwt$rate)[,1]
pwt$cluster <- NA
pwt$cluster_name <- "PWT"
View(pwt)
data <- data %>%
mutate(cluster_name = case_when(cluster == 1 ~ "TBD",
cluster %in% c(2,3,5) ~ "GC",
cluster %in% c(4,6) ~ "SS")) %>%
rbind(pwt)
library(dplyr)
## Get Genotype Counts
pdt <- unique(names(read.csv("e.coli.ids")))
json.stream <- readRDS("TNTFileGenerator/e.coli.RDS")
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
fgenotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(fgenotypes) <- id
rgenotypes <- fgenotypes
rgenotypes[!(names(fgenotypes) %in% pdt)] <- NULL
genotypesall <- unique(sort(unlist(rgenotypes)))
genobinv <- lapply(rgenotypes, function(x){(genotypesall %in% x) * 1})
gdf <- as.data.frame(matrix(unlist(genobinv), ncol = length(genotypesall), byrow = T))
names(gdf) <- genotypesall
counts <- as.data.frame(colSums(gdf))
colnames(counts) <- "Isolate_Count"
counts$Genotype <- rownames(counts)
## Read in Gain and Loss Data
data <- read.csv("gainloss_counts.csv")
data <- merge(data, counts, by = "Genotype")
## Remove PWTs: blaEC & blaEC-5 (outliers)
data <- data %>% filter(!Genotype %in% c("blaEC", "blaEC-5"))
## Calculate rate columns, net_gain, and net_loss
# data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
# data$gain_rate <- data$Gain/data$Isolate_Count
# data$loss_rate <- data$Loss/data$Isolate_Count
data$rate <- data$Isolate_Count/(data$Gain-data$Loss)
data$net_gain <- scale(data$Gain * data$rate)[,1]
data$net_loss <- scale(data$Loss * data$rate)[,1]
## Prepare PWTs
pwt <- data %>% filter(Genotype %in% c("blaEC", "blaEC-5"))
pwt$rate <- pwt$Isolate_Count/(pwt$Gain-data$Loss)
pwt$net_gain <- scale(pwt$Gain * pwt$rate)[,1]
pwt$net_loss <- scale(pwt$Loss * pwt$rate)[,1]
pwt$cluster <- NA
pwt$category <- "PWT"
############
## k-Means Analysis
library(mclust)
set.seed(1337)
meanclust <- Mclust(data[,6:7])
data$cluster <- factor(meanclust$classification)
cluster_counts <- data %>%
group_by(cluster) %>%
tally()
data <- data %>%
mutate(category = case_when(cluster == 1 ~ "TBD",
cluster %in% c(2,3,5) ~ "GC",
cluster %in% c(4,6) ~ "SS")) %>%
rbind(pwt)
View(data)
View(data)
data <- data %>%
mutate(category = case_when(cluster == 1 ~ "TBD",
cluster %in% c(2,3,5) ~ "GC",
cluster %in% c(4,6) ~ "SS")) %>%
rbind(.,pwt)
View(pwt)
library(dplyr)
## Get Genotype Counts
pdt <- unique(names(read.csv("e.coli.ids")))
json.stream <- readRDS("TNTFileGenerator/e.coli.RDS")
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
fgenotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(fgenotypes) <- id
rgenotypes <- fgenotypes
rgenotypes[!(names(fgenotypes) %in% pdt)] <- NULL
genotypesall <- unique(sort(unlist(rgenotypes)))
genobinv <- lapply(rgenotypes, function(x){(genotypesall %in% x) * 1})
gdf <- as.data.frame(matrix(unlist(genobinv), ncol = length(genotypesall), byrow = T))
names(gdf) <- genotypesall
counts <- as.data.frame(colSums(gdf))
colnames(counts) <- "Isolate_Count"
counts$Genotype <- rownames(counts)
## Read in Gain and Loss Data
data <- read.csv("gainloss_counts.csv")
data <- merge(data, counts, by = "Genotype")
## Remove PWTs: blaEC & blaEC-5 (outliers)
data <- data %>% filter(!Genotype %in% c("blaEC", "blaEC-5"))
## Calculate rate columns, net_gain, and net_loss
# data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
# data$gain_rate <- data$Gain/data$Isolate_Count
# data$loss_rate <- data$Loss/data$Isolate_Count
data$rate <- data$Isolate_Count/(data$Gain-data$Loss)
data$net_gain <- scale(data$Gain * data$rate)[,1]
data$net_loss <- scale(data$Loss * data$rate)[,1]
## Prepare PWTs
pwt <- data %>% filter(Genotype %in% c("blaEC", "blaEC-5"))
pwt$rate <- pwt$Isolate_Count/(pwt$Gain-data$Loss)
pwt$net_gain <- scale(pwt$Gain * pwt$rate)[,1]
pwt$net_loss <- scale(pwt$Loss * pwt$rate)[,1]
pwt$cluster <- NA
pwt$category <- "PWT"
## Prepare PWTs
pwt <- data %>% filter(Genotype %in% c("blaEC", "blaEC-5"))
library(dplyr)
## Get Genotype Counts
pdt <- unique(names(read.csv("e.coli.ids")))
json.stream <- readRDS("TNTFileGenerator/e.coli.RDS")
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
fgenotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(fgenotypes) <- id
rgenotypes <- fgenotypes
rgenotypes[!(names(fgenotypes) %in% pdt)] <- NULL
genotypesall <- unique(sort(unlist(rgenotypes)))
genobinv <- lapply(rgenotypes, function(x){(genotypesall %in% x) * 1})
gdf <- as.data.frame(matrix(unlist(genobinv), ncol = length(genotypesall), byrow = T))
names(gdf) <- genotypesall
counts <- as.data.frame(colSums(gdf))
colnames(counts) <- "Isolate_Count"
counts$Genotype <- rownames(counts)
## Read in Gain and Loss Data
data <- read.csv("gainloss_counts.csv")
data <- merge(data, counts, by = "Genotype")
## Prepare PWTs
pwt <- data %>% filter(Genotype %in% c("blaEC", "blaEC-5"))
pwt$rate <- pwt$Isolate_Count/(pwt$Gain-data$Loss)
pwt$net_gain <- scale(pwt$Gain * pwt$rate)[,1]
pwt$net_loss <- scale(pwt$Loss * pwt$rate)[,1]
pwt$cluster <- NA
pwt$category <- "PWT"
## Remove PWTs: blaEC & blaEC-5 (outliers)
data <- data %>% filter(!Genotype %in% c("blaEC", "blaEC-5"))
## Calculate rate columns, net_gain, and net_loss
# data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
# data$gain_rate <- data$Gain/data$Isolate_Count
# data$loss_rate <- data$Loss/data$Isolate_Count
data$rate <- data$Isolate_Count/(data$Gain-data$Loss)
data$net_gain <- scale(data$Gain * data$rate)[,1]
data$net_loss <- scale(data$Loss * data$rate)[,1]
############
## k-Means Analysis
library(mclust)
set.seed(1337)
meanclust <- Mclust(data[,6:7])
data$cluster <- factor(meanclust$classification)
cluster_counts <- data %>%
group_by(cluster) %>%
tally()
data <- data %>%
mutate(category = case_when(cluster == 1 ~ "TBD",
cluster %in% c(2,3,5) ~ "GC",
cluster %in% c(4,6) ~ "SS")) %>%
rbind(pwt)
View(data)
View(pwt)
View(data)
View(pwt)
pwt$rate <- pwt$Isolate_Count/(pwt$Gain-pwt$Loss)
pwt$net_gain <- scale(pwt$Gain * pwt$rate)[,1]
pwt$net_loss <- scale(pwt$Loss * pwt$rate)[,1]
pwt$cluster <- NA
pwt$category <- "PWT"
View(pwt)
pwt <- data %>% filter(Genotype %in% c("blaEC", "blaEC-5"))
pwt$rate <- pwt$Isolate_Count/(pwt$Gain-pwt$Loss)
pwt$net_gain <- scale(pwt$Gain * pwt$rate)[,1]
pwt$net_loss <- scale(pwt$Loss * pwt$rate)[,1]
pwt$cluster <- NA
pwt$category <- "PWT"
## Prepare PWTs
pwt <- data %>% filter(Genotype %in% c("blaEC", "blaEC-5"))
pwt$rate <- pwt$Isolate_Count/(pwt$Gain-pwt$Loss)
pwt$net_gain <- scale(pwt$Gain * pwt$rate)[,1]
pwt$net_loss <- scale(pwt$Loss * pwt$rate)[,1]
pwt$cluster <- NA
View(pwt)
library(dplyr)
## Get Genotype Counts
pdt <- unique(names(read.csv("e.coli.ids")))
json.stream <- readRDS("TNTFileGenerator/e.coli.RDS")
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
fgenotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(fgenotypes) <- id
rgenotypes <- fgenotypes
rgenotypes[!(names(fgenotypes) %in% pdt)] <- NULL
genotypesall <- unique(sort(unlist(rgenotypes)))
genobinv <- lapply(rgenotypes, function(x){(genotypesall %in% x) * 1})
gdf <- as.data.frame(matrix(unlist(genobinv), ncol = length(genotypesall), byrow = T))
names(gdf) <- genotypesall
counts <- as.data.frame(colSums(gdf))
colnames(counts) <- "Isolate_Count"
counts$Genotype <- rownames(counts)
## Read in Gain and Loss Data
data <- read.csv("gainloss_counts.csv")
data <- merge(data, counts, by = "Genotype")
## Prepare PWTs
pwt <- data %>% filter(Genotype %in% c("blaEC", "blaEC-5"))
pwt$rate <- pwt$Isolate_Count/(pwt$Gain-pwt$Loss)
pwt$net_gain <- scale(pwt$Gain * pwt$rate)[,1]
pwt$net_loss <- scale(pwt$Loss * pwt$rate)[,1]
pwt$cluster <- NA
pwt$category <- "PWT"
View(pwt)
## Remove PWTs: blaEC & blaEC-5 (outliers)
data <- data %>% filter(!Genotype %in% c("blaEC", "blaEC-5"))
## Calculate rate columns, net_gain, and net_loss
# data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
# data$gain_rate <- data$Gain/data$Isolate_Count
# data$loss_rate <- data$Loss/data$Isolate_Count
data$rate <- data$Isolate_Count/(data$Gain-data$Loss)
data$net_gain <- scale(data$Gain * data$rate)[,1]
data$net_loss <- scale(data$Loss * data$rate)[,1]
############
## k-Means Analysis
library(mclust)
set.seed(1337)
meanclust <- Mclust(data[,6:7])
data$cluster <- factor(meanclust$classification)
cluster_counts <- data %>%
group_by(cluster) %>%
tally()
data <- data %>%
mutate(category = case_when(cluster == 1 ~ "TBD",
cluster %in% c(2,3,5) ~ "GC",
cluster %in% c(4,6) ~ "SS")) %>%
rbind(pwt)
View(data)
write.csv(data, "clusters.csv")
