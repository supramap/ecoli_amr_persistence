geom_point() +
geom_label()
ggplotly(p)
p <- ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), y=0, color=cluster, text=c(Genotype, Gain, Loss))) +
geom_point() +
geom_label()
ggplotly(p)
p <- ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), y=0, color=cluster, text=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
View(data)
## Read in Data
data <- read.csv("gainloss_counts.csv")
data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
View(data)
nrow(data[data$pctdiff == 2,])
View(data[data$pctdiff == 2,])
## Read in Data
data <- read.csv("gainloss_counts.csv")
## Separate Clusters
gainclust <- Mclust(data[,1])
lossclust <- Mclust(data[,2])
View(gainclust)
gainclust[["classification"]]
View(lossclust)
View(lossclust)
View(lossclust[["classification"]])
unique(lossclust[["classification"]])
data$gaincluster <- factor(gainclust$cluster)
data$gaincluster <- factor(gainclust$classification)
data$losscluster <- factor(lossclust$classification)
data$cluster <- paste0(data$gaincluster, "|", data$losscluster)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
ggplotly(p)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
View(gainclust)
unique(gainclust[["classification"]])
View(lossclust)
unique(lossclust[["classification"]])
unique(data$gaincluster)
unique(data$losscluster)
unique(data$cluster)
View(data)
paste0(data$gaincluster, "|", data$losscluster)
p <- ggplot(data = data, aes(x=log(Gain), y=log(Loss), color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
p <- ggplot(data = data, aes(x=log(Gain), y=log(Loss), color=cluster, label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
## Define GC, SS, and TBD Groups
data$GC.SS <- "SS"
data$GC.SS[data$cluster == "2|1"] <- "GC"
data$GC.SS[data$cluster == "1|1"] <- "TBD"
View(data)
write.csv(data, "clusters.csv")
data <- read.csv("AMR_FunctionalMechanisms.csv")
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$GC.SS
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyType_ks <- ks.test(gc$n,
ss$n,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyType_ks)
View(data)
plot(data[data$GC.SS == "GC"]$Type)
plot(data[data$GC.SS == "GC",]$Type)
plot(data[data$GC.SS == "SS",]$Type)
View(data)
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$GC.SS
View(newgcss)
View(newgcss)
######################
## GC/SS by Resistance Mechanism
GCSSbyRM <- data %>% group_by(GC.SS, Resistance.Mechanism, .drop = FALSE) %>% tally()
gc <- GCSSbyRM %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyRM %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyRM_ks <- ks.test(gc$pct,
ss$pct,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyRM_ks)
data %>% group_by(GC.SS) %>% tally
## Read in Data
data <- read.csv("gainloss_counts.csv")
data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
library(mclust)
meanclust <- Mclust(data[,1:2])
data$cluster <- factor(meanclust$classification)
counts <- data %>% group_by(cluster) %>% tally()
## Separate Clusters
gainclust <- Mclust(data[,1])
data$gaincluster <- factor(gainclust$classification)
lossclust <- Mclust(data[,2])
data$losscluster <- factor(lossclust$classification)
data$cluster <- paste0(data$gaincluster, "|", data$losscluster)
###############
## Plot Genotype Clusters
library(ggplot2)
library(plotly)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
p <- ggplot(data = data, aes(x=log(Gain), y=log(Loss), color=cluster, label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
ggplotly(p)
View(data)
View(gainclust)
gainclust[["classification"]]
data$gainclusterletter <- if(data$gaincluster == 1){
"Infrequently"
} else {
"Frequently"
}
if(data$gaincluster == 1){
"Infrequently"
} else {
"Frequently"
}
if(data$gaincluster == 1){
"Infrequently"
}
data <- data %>% mutate(gaincluster,
gaincluster = ifelse(gaincluster == 1,
"Infrequently",
"Frequently"))
View(data)
data <- data %>%
mutate(gaincluster,
gaincluster = ifelse(gaincluster == 1,
"Infrequently",
"Frequently")) %>%
mutate(losscluster,
losscluster = if(losscluster == 1){
"Never"
}else if(losscluster == 7){
"Infrequently"
}else{
"Frequently"
})
data <- data %>%
mutate(gaincluster,
gaincluster = ifelse(gaincluster == 1,
"Infrequently",
"Frequently")) %>%
mutate(losscluster,
losscluster = ifelse(losscluster == 1,
"Never",
ifelse(losscluster == 7,
"Infrequently",
"Frequently")))
View(data)
data$cluster <- paste0("G:",
data$gaincluster,
"|L:"
, data$losscluster)
View(data)
data$cluster <- paste0("G:",
data$gaincluster,
" | L:"
, data$losscluster)
View(data)
data$cluster <- paste0("G: ",
data$gaincluster,
" | L: "
, data$losscluster)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
ggplotly(p)
View(data)
## Read in Data
data <- read.csv("gainloss_counts.csv")
data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
## Separate Clusters
gainclust <- Mclust(data[,1])
data$gaincluster <- factor(gainclust$classification)
lossclust <- Mclust(data[,2])
data$losscluster <- factor(lossclust$classification)
data <- data %>%
mutate(gaincluster,
gaincluster = ifelse(gaincluster == 1,
"Infrequently",
"Frequently")) %>%
mutate(losscluster,
losscluster = ifelse(losscluster == 1,
"Never",
ifelse(losscluster == 7,
"Infrequently",
"Frequently")))
data$cluster <- paste0("G: ",
data$gaincluster,
" | L: "
, data$losscluster)
View(data)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
ggplotly(p)
p <- ggplot(data = data, aes(x=log(Gain), y=log(Loss), color=cluster, label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
## Define GC, SS, and TBD Groups
data$GC.SS <- "SS"
data$GC.SS[data$cluster == "G: Frequently | L: Infrequently"] <- "GC"
data$GC.SS[data$cluster == "G: Frequently | L: Never"] <- "GC"
data$GC.SS[data$cluster == "G: Infrequently | L: Never"] <- "TBD"
View(data)
write.csv(data, "clusters.csv")
library(dplyr)
data <- read.csv("AMR_FunctionalMechanisms.csv")
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$GC.SS
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyType_ks <- ks.test(gc$n,
ss$n,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyType_ks)
plot(data[data$GC.SS == "GC",]$Type)
plot(data[data$GC.SS == "SS",]$Type)
p <- ggplot(data, aes(Type, fill=GC.SS))
ggplotly(p)
p <- ggplot(data, aes(Type))
ggplotly(p)
p <- ggplot(data, aes(Type)) +
geom_bar()
ggplotly(p)
p <- ggplot(data, aes(Type, fill = GC.SS)) +
geom_bar()
ggplotly(p)
p <- ggplot(data, aes(Type, fill = GC.SS)) +
geom_bar(stat = "identity", position = 'dodge')
ggplotly(p)
View(data)
p <- ggplot(data, aes(Type, Count, fill = GC.SS)) +
geom_bar(stat = "identity", position = 'dodge')
ggplotly(p)
p <- ggplot(data, aes(Type, sum(Count), fill = GC.SS)) +
geom_bar(stat = "identity", position = 'dodge')
ggplotly(p)
p <- ggplot(data, aes(Type, fill = GC.SS)) +
geom_bar(stat = "identity", position = 'dodge')
ggplotly(p)
p <- ggplot(data, aes(Type, fill = GC.SS)) +
geom_bar()
ggplotly(p)
p <- ggplot(data, aes(Type, fill = GC.SS)) +
geom_bar(postition="dodge")
ggplotly(p)
p <- ggplot(data, aes(Type, fill = GC.SS)) +
geom_bar(postition="dodge")
ggplotly(p)
p <- ggplot(data, aes(Type, fill = GC.SS)) +
geom_bar(position="dodge")
ggplotly(p)
######################
## GC/SS by Resistance Mechanism
GCSSbyRM <- data %>% group_by(GC.SS, Resistance.Mechanism, .drop = FALSE) %>% tally()
gc <- GCSSbyRM %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyRM %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyRM_ks <- ks.test(gc$pct,
ss$pct,
alternative = "two.sided",
exact = TRUE)
p <- ggplot(data, aes(Resistance.Mechanism, fill = GC.SS)) +
geom_bar(position="dodge")
ggplotly(p)
p <- ggplot(data, aes(Resistance.Mechanism, fill = GC.SS)) +
geom_bar(position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- ggplot(data, aes(Resistance.Mechanism, fill = GC.SS)) +
geom_bar(position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplotly(p)
######################
## GC/SS by Gene
GCSSbyGene <- data %>% group_by(GC.SS, AMR.Gene, .drop = FALSE) %>% tally()
gc <- GCSSbyGene %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyGene %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyGene_ks <- ks.test(gc$n,
ss$n,
alternative = "two.sided",
paired = TRUE)
p <- ggplot(data, aes(AMR.Gene, fill = GC.SS)) +
geom_bar(position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplotly(p)
p <- ggplot(data, aes(Resistance.Mechanism, fill = GC.SS)) +
geom_bar(position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10))
ggplotly(p)
library(stringr)
p <- ggplot(data, aes(Resistance.Mechanism, fill = GC.SS)) +
geom_bar(position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10))
ggplotly(p)
p <- ggplot(data, aes(Resistance.Mechanism, fill = GC.SS)) +
geom_bar(position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplotly(p)
install.packages("ggsci")
p <- ggplot(data, aes(Type, fill = GC.SS)) +
geom_bar(position="dodge")+
scale_color_npg()
ggplotly(p)
library(ggsci)
p <- ggplot(data, aes(Type, fill = GC.SS)) +
geom_bar(position="dodge")+
scale_color_npg()
ggplotly(p)
p <- ggplot(data, aes(Type, fill = GC.SS)) +
geom_bar(position="dodge")+
scale_fill_npg()
ggplotly(p)
p <- ggplot(data, aes(Resistance.Mechanism, fill = GC.SS)) +
geom_bar(position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_npg()
ggplotly(p)
p <- ggplot(data, aes(Resistance.Mechanism, fill = GC.SS)) +
geom_bar(position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_npg() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10))
ggplotly(p)
p
p
p <- ggplot(data, aes(Resistance.Mechanism, fill = GC.SS)) +
geom_bar(position="dodge") +
#theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_npg() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10))
ggplotly(p)
p
p <- ggplot(data, aes(Resistance.Mechanism, fill = GC.SS)) +
geom_bar(position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_npg() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10))
ggplotly(p)
p <- ggplot(data, aes(Resistance.Mechanism, fill = GC.SS)) +
geom_bar(position="dodge") +
#theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_npg() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 5))
ggplotly(p)
p <- ggplot(data, aes(Type, fill = GC.SS)) +
geom_bar(position="dodge") +
scale_fill_npg()
ggplotly(p)
## Read in Data
data <- read.csv("gainloss_counts.csv")
data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
## Separate Clusters
gainclust <- Mclust(data[,1])
data$gaincluster <- factor(gainclust$classification)
lossclust <- Mclust(data[,2])
data$losscluster <- factor(lossclust$classification)
data <- data %>%
mutate(gaincluster,
gaincluster = ifelse(gaincluster == 1,
"Infrequently",
"Frequently")) %>%
mutate(losscluster,
losscluster = ifelse(losscluster == 1,
"Never",
ifelse(losscluster == 7,
"Infrequently",
"Frequently")))
##############################
##    Cluster Analysis by   ##
##        AMR Genotype      ##
##      Gains and Losses    ##
## By: Colby T. Ford, Ph.D. ##
##############################
library(dplyr)
## Separate Clusters
gainclust <- Mclust(data[,1])
data$gaincluster <- factor(gainclust$classification)
lossclust <- Mclust(data[,2])
data$losscluster <- factor(lossclust$classification)
library(mclust)
## Separate Clusters
gainclust <- Mclust(data[,1])
data$gaincluster <- factor(gainclust$classification)
lossclust <- Mclust(data[,2])
data$losscluster <- factor(lossclust$classification)
data <- data %>%
mutate(gaincluster,
gaincluster = ifelse(gaincluster == 1,
"Infrequently",
"Frequently")) %>%
mutate(losscluster,
losscluster = ifelse(losscluster == 1,
"Never",
ifelse(losscluster == 7,
"Infrequently",
"Frequently")))
data$cluster <- paste0("G: ",
data$gaincluster,
" | L: "
, data$losscluster)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
library(ggplot2)
library(plotly)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
#geom_vline(xintercept = 20) +
#geom_hline(yintercept = 17) +
ylim(0,2500)
ggplotly(p)
p <- ggplot(data = data, aes(x=Gain,
y=Loss,
color=cluster,
label=Genotype)) +
geom_point() +
geom_label() +
#geom_vline(xintercept = 20) +
#geom_hline(yintercept = 17) +
ylim(0,2500)
ggplotly(p)
p <- ggplot(data = data, aes(x=Gain,
y=Loss,
color=cluster,
label=Genotype)) +
geom_point() +
geom_label() +
#geom_vline(xintercept = 20) +
#geom_hline(yintercept = 17) +
ylim(0,2500) +
scale_fill_npg()
library(ggsci)
p <- ggplot(data = data, aes(x=Gain,
y=Loss,
color=cluster,
label=Genotype)) +
geom_point() +
geom_label() +
#geom_vline(xintercept = 20) +
#geom_hline(yintercept = 17) +
ylim(0,2500) +
scale_fill_npg()
ggplotly(p)
lp <- ggplot(data = data,
aes(x=log(Gain),
y=log(Loss),
color=cluster,
label=Genotype)) +
geom_point() +
geom_label() +
scale_fill_npg()
ggplotly(lp)
