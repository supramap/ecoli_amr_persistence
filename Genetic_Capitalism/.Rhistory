data$GC.SS <- if(cluster == 2){"SS"} else {"GC"}
data$GC.SS <- if(data$cluster == 2){"SS"} else {"GC"}
View(data)
data$GC.SS <- "GC"
View(data)
data$GC.SS[data$cluster == 2] <- "SS"
View(data)
write.csv(data, "clusters.csv")
newgcss <- read.csv("clusters.csv")
View(data)
View(newgcss)
data$GC.SS <- newgcss$GC.SS
View(data)
data <- read.csv("AMR_FunctionalMechanisms.csv")
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$GC.SS
View(data)
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyType_ks <- ks.test(gc$n,
ss$n,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyType_ks)
View(data)
######################
## GC/SS by Resistance Mechanism
GCSSbyRM <- data %>% group_by(GC.SS, Resistance.Mechanism, .drop = FALSE) %>% tally()
gc <- GCSSbyRM %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyRM %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyRM_ks <- ks.test(gc$pct,
ss$pct,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyType_ks)
View(GCSSbyRM_ks)
nrow(data[data$GC.SS=="SS"])
sum(data[data$GC.SS=="SS"])
sum(data[,data$GC.SS=="SS"])
sum(data[data$GC.SS=="SS",])
data[data$GC.SS=="SS",]
nrow(data[data$GC.SS=="SS",])
nrow(data[data$GC.SS=="GC",])
############
library(Gmedian)
medclust <- kGmedian(data[,1:2],
ncenters = 5)
data$cluster <- factor(medclust$cluster)
centers <- as.data.frame(medclust$centers)
set.seed(1337)
medclust <- kGmedian(data[,1:2],
ncenters = 5)
data <- read.csv("gainloss_counts.csv")
############
library(Gmedian)
set.seed(1337)
medclust <- kGmedian(data[,1:2],
ncenters = 5)
data$cluster <- factor(medclust$cluster)
centers <- as.data.frame(medclust$centers)
ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
###############
library(ggplot2)
ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
data$GC.SS <- "GC"
data$GC.SS[data$cluster == 3] <- "SS"
write.csv(data, "clusters.csv")
library(dplyr)
data <- read.csv("AMR_FunctionalMechanisms.csv")
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$GC.SS
######################
## GC/SS by Resistance Mechanism
GCSSbyRM <- data %>% group_by(GC.SS, Resistance.Mechanism, .drop = FALSE) %>% tally()
gc <- GCSSbyRM %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyRM %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyRM_ks <- ks.test(gc$pct,
ss$pct,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyRM_ks)
nrow(data[data$GC.SS=="SS",])
data$GC.SS[data$cluster == 5] <- NULL
View(data)
############
library(Gmedian)
set.seed(1337)
medclust <- kGmedian(data[,1:2],
ncenters = 5)
data$cluster <- factor(medclust$cluster)
data <- read.csv("gainloss_counts.csv")
set.seed(1337)
medclust <- kGmedian(data[,1:2],
ncenters = 5)
data$cluster <- factor(medclust$cluster)
centers <- as.data.frame(medclust$centers)
data$GC.SS <- "GC"
ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
data$GC.SS[data$cluster == 3] <- "SS"
data$GC.SS[data$cluster == 5] <- NULL
data$GC.SS[data$cluster == 5]
data$GC.SS[data$cluster == 5] <- ""
View(data)
medclust <- kGmedian(data[,1:2],
ncenters = 5)
data$cluster <- factor(medclust$cluster)
centers <- as.data.frame(medclust$centers)
data$GC.SS <- "GC"
data$GC.SS[data$cluster == 3] <- "SS"
data$GC.SS[data$cluster == 5] <- "TBD"
medclust <- kGmedian(data[,1:2],
ncenters = 5)
data$cluster <- factor(medclust$cluster)
centers <- as.data.frame(medclust$centers)
nrow(data$GC.SS[data$cluster == 5])
length(data$GC.SS[data$cluster == 5])
409-222
set.seed(1337)
medclust <- kGmedian(data[,1:2],
ncenters = 5)
data$cluster <- factor(medclust$cluster)
centers <- as.data.frame(medclust$centers)
data$GC.SS <- "GC"
data$GC.SS[data$cluster == 3] <- "SS"
data$GC.SS[data$cluster == 5] <- "TBD"
data <- read.csv("AMR_FunctionalMechanisms.csv")
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$GC.SS
######################
## GC/SS by Resistance Mechanism
GCSSbyRM <- data %>% group_by(GC.SS, Resistance.Mechanism, .drop = FALSE) %>% tally()
gc <- GCSSbyRM %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyRM %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyRM_ks <- ks.test(gc$pct,
ss$pct,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyRM_ks)
hist(data$Resistance.Mechanism)
plot(data$Resistance.Mechanism)
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyType_ks <- ks.test(gc$n,
ss$n,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyType_ks)
plot(data$Type)
plot(data[data$GC.SS == "GC"]$Type)
plot(data[data$GC.SS == "GC",]$Type)
plot(data[data$GC.SS == "SS",]$Type)
plot(data[data$GC.SS == "GC",]$Type)
data <- read.csv("AMR_FunctionalMechanisms.csv")
newgcss <- read.csv("clusters.csv")
View(data)
View(newgcss)
data <- read.csv("gainloss_counts.csv")
############
library(Gmedian)
set.seed(1337)
medclust <- kGmedian(data[,1:2],
ncenters = 5)
data$cluster <- factor(medclust$cluster)
centers <- as.data.frame(medclust$centers)
data$GC.SS <- "GC"
data$GC.SS[data$cluster == 3] <- "SS"
data$GC.SS[data$cluster == 5] <- "TBD"
write.csv(data, "clusters.csv")
data <- read.csv("AMR_FunctionalMechanisms.csv")
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$GC.SS
View(data)
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyType_wt <- wilcox.test(gc$n,
ss$n,
alternative = "two.sided",
paired = TRUE)
GCSSbyType_ks <- ks.test(gc$n,
ss$n,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyType_ks)
plot(data[data$GC.SS == "GC",]$Type)
plot(data[data$GC.SS == "SS",]$Type)
plot(data[data$GC.SS == "TBD",]$Type)
install.packages("ggplotly")
devtools::install_github("ropensci/plotly")
library(plotly)
ggplotly(p)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
library(plotly)
ggplotly(p)
## Read in Data
data <- read.csv("gainloss_counts.csv")
############
## k-Median Analysis
library(Gmedian)
set.seed(1337)
medclust <- kGmedian(data[,1:2],
ncenters = 5)
data$cluster <- factor(medclust$cluster)
centers <- as.data.frame(medclust$centers)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
library(plotly)
ggplotly(p)
data$GC.SS[data$cluster == 5]
## Read in Data
data <- read.csv("gainloss_counts.csv")
set.seed(1337)
medclust <- kGmedian(data[,1:2],
ncenters = 5)
data$cluster <- factor(medclust$cluster)
centers <- as.data.frame(medclust$centers)
View(data)
nrow(data$GC.SS[data$cluster == 5])
length(data$GC.SS[data$cluster == 5])
data[data$cluster == 5]
data[data$cluster == 5,]
nrow(data[data$cluster == 5,])
counts <- data %>% group_by(cluster) %>% tally()
View(counts)
sum(counts$n)
############
## k-Means Analysis
meanclust <- kmeans(data[,1:2],
centers = 5,
iter.max = 10000)
data$cluster <- factor(meanclust$cluster)
centers <- as.data.frame(meanclust$centers)
counts <- data %>% group_by(cluster) %>% tally()
View(counts)
set.seed(1337)
############
## k-Means Analysis
meanclust <- kmeans(data[,1:2],
centers = 5,
iter.max = 10000)
############
## k-Means Analysis
set.seed(1337)
meanclust <- kmeans(data[,1:2],
centers = 5,
iter.max = 10000)
data$cluster <- factor(meanclust$cluster)
centers <- as.data.frame(meanclust$centers)
counts <- data %>% group_by(cluster) %>% tally()
View(counts)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
library(plotly)
ggplotly(p)
############
## k-Means Analysis
set.seed(1337)
meanclust <- kmeans(scale(data[,1:2]),
centers = 5,
iter.max = 10000)
data$cluster <- factor(meanclust$cluster)
centers <- as.data.frame(meanclust$centers)
counts <- data %>% group_by(cluster) %>% tally()
View(counts)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
library(plotly)
ggplotly(p)
p <- ggplot(data = scale(data), aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
p <- ggplot(data = scale(data), aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label()
p <- ggplot(data = data, aes(x=scale(Gain), y=scale(Loss), color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
ggplotly(p)
p <- ggplot(data = data, aes(x=scale(Gain), y=scale(Loss), color=cluster, label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
library(mclust)
meanclust <- Mclust(scale(data[,1:2]))
View(meanclust)
View(meanclust)
counts <- data %>% group_by(cluster) %>% tally()
p <- ggplot(data = data, aes(x=scale(Gain), y=scale(Loss), color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
ggplotly(p)
View(meanclust)
meanclust[["classification"]]
unique(meanclust[["classification"]])
View(meanclust)
counts <- data %>% group_by(cluster) %>% tally()
View(counts)
meanclust <- Mclust(data[,1:2])
data$cluster <- factor(meanclust$classification)
counts <- data %>% group_by(cluster) %>% tally()
View(counts)
p <- ggplot(data = data, aes(x=scale(Gain), y=scale(Loss), color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
ggplotly(p)
p <- ggplot(data = data, aes(x=scale(Gain), y=scale(Loss), color=cluster, label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
ylim(0,2500)
ggplotly(p)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
ggplotly(p)
meanclust <- Mclust(abs(data[,1]-data[,2])/((data[,1]+ data[,2])/2))
data$cluster <- factor(meanclust$classification)
View(data)
counts <- data %>% group_by(cluster) %>% tally()
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
ggplotly(p)
p <- ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
ggplotly(p)
ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), color=cluster, label=Genotype))
ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), color=cluster, label=Genotype)) +
geom_point()
p <- ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), y=0, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
ggplotly(p)
p <- ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), y=0, color=cluster, label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
p <- ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), y=0, color=cluster, label=c(Genotype, Gain, Loss))) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
p <- ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), y=0, color=cluster, label=c(Genotype, Gain, Loss))) +
geom_point() +
geom_label()
ggplotly(p)
p <- ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), y=0, color=cluster, label=c("Genotype", "Gain", "Loss"))) +
geom_point() +
geom_label()
ggplotly(p)
p <- ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), y=0, color=cluster, text=c(Genotype, Gain, Loss))) +
geom_point() +
geom_label()
ggplotly(p)
p <- ggplot(data = data, aes(x=abs(Gain-Loss)/((Gain+Loss)/2), y=0, color=cluster, text=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
View(data)
## Read in Data
data <- read.csv("gainloss_counts.csv")
data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
View(data)
nrow(data[data$pctdiff == 2,])
View(data[data$pctdiff == 2,])
## Read in Data
data <- read.csv("gainloss_counts.csv")
## Separate Clusters
gainclust <- Mclust(data[,1])
lossclust <- Mclust(data[,2])
View(gainclust)
gainclust[["classification"]]
View(lossclust)
View(lossclust)
View(lossclust[["classification"]])
unique(lossclust[["classification"]])
data$gaincluster <- factor(gainclust$cluster)
data$gaincluster <- factor(gainclust$classification)
data$losscluster <- factor(lossclust$classification)
data$cluster <- paste0(data$gaincluster, "|", data$losscluster)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
ggplotly(p)
p <- ggplot(data = data, aes(x=Gain, y=Loss, color=cluster, label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
View(gainclust)
unique(gainclust[["classification"]])
View(lossclust)
unique(lossclust[["classification"]])
unique(data$gaincluster)
unique(data$losscluster)
unique(data$cluster)
View(data)
paste0(data$gaincluster, "|", data$losscluster)
p <- ggplot(data = data, aes(x=log(Gain), y=log(Loss), color=cluster, label=Genotype)) +
geom_point() +
geom_label() +
geom_vline(xintercept = 20) +
geom_hline(yintercept = 17) +
ylim(0,2500)
p <- ggplot(data = data, aes(x=log(Gain), y=log(Loss), color=cluster, label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
## Define GC, SS, and TBD Groups
data$GC.SS <- "SS"
data$GC.SS[data$cluster == "2|1"] <- "GC"
data$GC.SS[data$cluster == "1|1"] <- "TBD"
View(data)
write.csv(data, "clusters.csv")
data <- read.csv("AMR_FunctionalMechanisms.csv")
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$GC.SS
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyType_ks <- ks.test(gc$n,
ss$n,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyType_ks)
View(data)
plot(data[data$GC.SS == "GC"]$Type)
plot(data[data$GC.SS == "GC",]$Type)
plot(data[data$GC.SS == "SS",]$Type)
View(data)
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$GC.SS
View(newgcss)
View(newgcss)
######################
## GC/SS by Resistance Mechanism
GCSSbyRM <- data %>% group_by(GC.SS, Resistance.Mechanism, .drop = FALSE) %>% tally()
gc <- GCSSbyRM %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyRM %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
GCSSbyRM_ks <- ks.test(gc$pct,
ss$pct,
alternative = "two.sided",
exact = TRUE)
View(GCSSbyRM_ks)
data %>% group_by(GC.SS) %>% tally
