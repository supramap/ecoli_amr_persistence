data$net_loss <- scale(data$Loss * data$rate)
library(mclust)
## Combined Clusters
set.seed(1337)
install.packages("mclust")
library(mclust)
citation("mclust")
meanclust <- Mclust(data[,6:7])
data$cluster <- factor(meanclust$classification)
cluster_counts <- data %>%
group_by(cluster) %>%
tally()
data <- data %>% mutate(cluster = case_when(cluster == 1 ~ "TBD",
cluster == 2 ~ "GC",
cluster == 3 ~ "GC",
cluster == 4 ~ "SS",
cluster == 5 ~ "GC",
cluster == 6 ~ "SS"))
View(counts)
View(cluster_counts)
data <- data %>% mutate(cluster = case_when(cluster == 1 ~ "TBD",
cluster == 2 ~ "GC",
cluster == 3 ~ "GC",
cluster == 4 ~ "SS",
cluster == 5 ~ "GC",
cluster == 6 ~ "SS"))
View(data)
data <- data %>% mutate(GC.SS = case_when(cluster == 1 ~ "TBD",
cluster == 2 ~ "GC",
cluster == 3 ~ "GC",
cluster == 4 ~ "SS",
cluster == 5 ~ "GC",
cluster == 6 ~ "SS"))
lp <- ggplot(data = data,
aes(x=Gain,
y=Loss,
color=cluster,
label=Genotype)) +
geom_point() +
geom_label() #+
###############
## Plot Genotype Clusters
library(ggplot2)
library(plotly)
p <- ggplot(data = data,
aes(x=Gain,
y=Loss,
color=cluster,
label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
data <- data %>% mutate(GC.SS = case_when(cluster == 1 ~ "TBD",
cluster %in% c(2,3,5) ~ "GC",
cluster %in% c(4,6) ~ "SS"))
View(data)
View(data)
data$net_gain
data$net_gain[,2]
data$net_gain[,1]
data$net_gain <- scale(data$Gain * data$rate)[,1]
data$net_loss <- scale(data$Loss * data$rate)[,1]
data <- data %>% mutate(GC.SS = case_when(cluster == 1 ~ "TBD",
cluster %in% c(2,3,5) ~ "GC",
cluster %in% c(4,6) ~ "SS"))
View(data)
write.csv(data, "clusters.csv")
View(data)
p <- ggplot(data = data,
aes(x=Gain,
y=Loss,
color=cluster,
label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
library(dplyr)
## Get Genotype Counts
pdt <- unique(names(read.csv("e.coli.ids")))
json.stream <- readRDS("TNTFileGenerator/e.coli.RDS")
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
fgenotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(fgenotypes) <- id
rgenotypes <- fgenotypes
rgenotypes[!(names(fgenotypes) %in% pdt)] <- NULL
genotypesall <- unique(sort(unlist(rgenotypes)))
genobinv <- lapply(rgenotypes, function(x){(genotypesall %in% x) * 1})
gdf <- as.data.frame(matrix(unlist(genobinv), ncol = length(genotypesall), byrow = T))
names(gdf) <- genotypesall
counts <- as.data.frame(colSums(gdf))
colnames(counts) <- "Isolate_Count"
counts$Genotype <- rownames(counts)
## Read in Data
data <- read.csv("gainloss_counts.csv")
data <- merge(data, counts, by = "Genotype")
## Remove blaEC & blaEC-5
data <- data %>% filter(!Genotype %in% c("blaEC", "blaEC-5"))
# data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
# data$gain_rate <- data$Gain/data$Isolate_Count
# data$loss_rate <- data$Loss/data$Isolate_Count
data$rate <- data$Isolate_Count/(data$Gain-data$Loss)
data$net_gain <- scale(data$Gain * data$rate)[,1]
data$net_loss <- scale(data$Loss * data$rate)[,1]
library(mclust)
## Combined Clusters
set.seed(1337)
meanclust <- Mclust(data[,6:7])
data$cluster <- factor(meanclust$classification)
cluster_counts <- data %>%
group_by(cluster) %>%
tally()
data <- data %>% mutate(cluster = case_when(cluster == 1 ~ "TBD",
cluster %in% c(2,3,5) ~ "GC",
cluster %in% c(4,6) ~ "SS"))
write.csv(data, "clusters.csv")
p <- ggplot(data = data,
aes(x=Gain,
y=Loss,
color=cluster,
label=Genotype)) +
geom_point() +
geom_label()
ggplotly(p)
p <- ggplot(data = data,
aes(x=Gain,
y=Loss,
color=cluster,
label=Genotype)) +
geom_point() +
geom_label() +
xlim(0,2500) +
ylim(0,2500)
ggplotly(p)
p
p <- ggplot(data = data,
aes(x=Gain,
y=Loss,
color=cluster,
label=Genotype)) +
geom_point() +
geom_label() +
xlim(0,2500) +
ylim(0,1000)
p
p <- ggplot(data = data,
aes(x=Gain,
y=Loss,
color=cluster,
label=Genotype)) +
geom_point() +
geom_label() +
xlim(0,2500) +
ylim(0,800)
ggplotly(p)
p <- ggplot(data = data,
aes(x = Gain,
y = Loss,
color = cluster,
label = Genotype,
text = paste("Rate: ", rate))) +
geom_point() +
geom_label() +
xlim(0,2500) +
ylim(0,800)
ggplotly(p)
View(data)
p <- ggplot(data = data,
aes(x = Gain,
y = Loss,
color = cluster,
label = Genotype,
text = paste("Rate: ", rate,
"\nNet Gain: ", net_gain,
"\nNet Loss: ", net_loss))) +
geom_point() +
geom_label() +
xlim(0,2500) +
ylim(0,800)
ggplotly(p)
View(data)
p <- ggplot(data = data,
aes(x = Gain,
y = Loss,
color = cluster,
label = Genotype,
text = paste("Rate: ", rate,
"\nNet Gain: ", net_gain,
"\nNet Loss: ", net_loss))) +
geom_point(alpha = (1/3)) +
geom_label() +
xlim(0,2500) +
ylim(0,800)
ggplotly(p)
p <- ggplot(data = data,
aes(x = Gain,
y = Loss,
color = cluster,
label = Genotype,
text = paste("Rate: ", rate,
"\nNet Gain: ", net_gain,
"\nNet Loss: ", net_loss))) +
geom_point(alpha = (2/3)) +
geom_label() +
xlim(0,2500) +
ylim(0,800)
ggplotly(p)
###############################################################
##    Cluster Analysis of AMR Genotype  Gains and Losses     ##
## By: Colby T. Ford, Ph.D., Gabriel Zenarosa, Ph.D.,        ##
##     Kevin Smith, John Williams, and Daniel Janies, Ph.D.  ##
###############################################################
library(dplyr)
## Get Genotype Counts
pdt <- unique(names(read.csv("e.coli.ids")))
json.stream <- readRDS("TNTFileGenerator/e.coli.RDS")
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
fgenotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(fgenotypes) <- id
rgenotypes <- fgenotypes
rgenotypes[!(names(fgenotypes) %in% pdt)] <- NULL
genotypesall <- unique(sort(unlist(rgenotypes)))
genobinv <- lapply(rgenotypes, function(x){(genotypesall %in% x) * 1})
gdf <- as.data.frame(matrix(unlist(genobinv), ncol = length(genotypesall), byrow = T))
names(gdf) <- genotypesall
counts <- as.data.frame(colSums(gdf))
colnames(counts) <- "Isolate_Count"
counts$Genotype <- rownames(counts)
## Read in Data
data <- read.csv("gainloss_counts.csv")
data <- merge(data, counts, by = "Genotype")
## Remove blaEC & blaEC-5
data <- data %>% filter(!Genotype %in% c("blaEC", "blaEC-5"))
# data$pctdiff <- abs(data$Gain-data$Loss)/((data$Gain+data$Loss)/2)
# data$gain_rate <- data$Gain/data$Isolate_Count
# data$loss_rate <- data$Loss/data$Isolate_Count
data$rate <- data$Isolate_Count/(data$Gain-data$Loss)
data$net_gain <- scale(data$Gain * data$rate)[,1]
data$net_loss <- scale(data$Loss * data$rate)[,1]
############
## k-Means Analysis
library(mclust)
set.seed(1337)
meanclust <- Mclust(data[,6:7])
data$cluster <- factor(meanclust$classification)
cluster_counts <- data %>%
group_by(cluster) %>%
tally()
data <- data %>% mutate(cluster = case_when(cluster == 1 ~ "TBD",
cluster %in% c(2,3,5) ~ "GC",
cluster %in% c(4,6) ~ "SS"))
write.csv(data, "clusters.csv")
###############
## Plot Genotype Clusters
library(ggplot2)
library(plotly)
p <- ggplot(data = data,
aes(x = Gain,
y = Loss,
color = cluster,
label = Genotype,
text = paste("Rate: ", rate,
"\nNet Gain: ", net_gain,
"\nNet Loss: ", net_loss))) +
geom_point(alpha = (2/3)) +
geom_label() +
xlim(0,2500) +
ylim(0,800)
ggplotly(p)
library(dplyr)
library(ggplot2)
library(plotly)
library(ggsci)
data <- read.csv("AMR_FunctionalMechanisms.csv")
## Remove blaEC & blaEC-5
data <- data %>% filter(!AMR.Gene %in% c("blaEC", "blaEC-5"))
## Read in new clusters
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$cluster
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
tbd <- GCSSbyType %>% filter(GC.SS == "TBD")
tbd$pct <- tbd$n/sum(tbd$n)
## For all 3 categories: GC, SS, TBD
GCSSbyType_ft <- fisher.test(matrix(c(gc$n,
ss$n,
tbd$n),
3,
6,
byrow=TRUE,
dimnames = list(classification=c("GC",
"SS",
"TBD"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
p <- ggplot(data, aes(Type,  fill = GC.SS)) +
geom_bar(position="dodge") +
scale_fill_npg()
ggplotly(p)
library(ggsci)
install.packages("ggsci")
library(ggsci)
p <- ggplot(data, aes(Type,  fill = GC.SS)) +
geom_bar(position="dodge") +
scale_fill_npg()
ggplotly(p)
## For all 3 categories: GC, SS, TBD
GCSSbyType_ft <- fisher.test(matrix(c(gc$n,
ss$n,
tbd$n),
3,
6,
byrow=TRUE,
dimnames = list(classification=c("GC",
"SS",
"TBD"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally()
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
tbd <- GCSSbyType %>% filter(GC.SS == "TBD")
tbd$pct <- tbd$n/sum(tbd$n)
## For all 3 categories: GC, SS, TBD
GCSSbyType_ft <- fisher.test(matrix(c(gc$n,
ss$n,
tbd$n),
3,
6,
byrow=TRUE,
dimnames = list(classification=c("GC",
"SS",
"TBD"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
data <- read.csv("AMR_FunctionalMechanisms.csv")
## Remove blaEC & blaEC-5
data <- data %>% filter(!AMR.Gene %in% c("blaEC", "blaEC-5"))
## Read in new clusters
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$cluster
View(data)
data <- read.csv("AMR_FunctionalMechanisms.csv")
## Remove blaEC & blaEC-5
data <- data %>% filter(!AMR.Gene %in% c("blaEC", "blaEC-5"))
## Read in new clusters
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$cluster
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally()
View(GCSSbyType)
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type) %>%
tally(.drop = FALSE)
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally(.drop = FALSE)
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally()
View(GCSSbyType)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally()
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
data <- read.csv("AMR_FunctionalMechanisms.csv")
## Remove blaEC & blaEC-5
data <- data %>% filter(!AMR.Gene %in% c("blaEC", "blaEC-5"))
## Read in new clusters
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$cluster
library(dplyr)
library(ggplot2)
library(plotly)
library(ggsci)
######################
## GC/SS by Type
GCSSbyType <- data %>%
group_by(GC.SS, Type, .drop = FALSE) %>%
tally()
View(GCSSbyType)
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type) %>% tally()
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop = FALSE) %>% tally()
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop=FALSE) %>% tally()
data %>% group_by(GC.SS, Type, .drop=FALSE)
GCSSbyType <- data %>% group_by(GC.SS, Type) %>% count(.drop=FALSE)
View(GCSSbyType)
library(dplyr)
library(ggplot2)
library(plotly)
library(ggsci)
data <- read.csv("AMR_FunctionalMechanisms.csv")
## Remove blaEC & blaEC-5
data <- data %>% filter(!AMR.Gene %in% c("blaEC", "blaEC-5"))
## Read in new clusters
newgcss <- read.csv("clusters.csv")
data$GC.SS <- newgcss$cluster
######################
## GC/SS by Type
GCSSbyType <- data %>% group_by(GC.SS, Type, .drop=FALSE) %>% tally()
View(GCSSbyType)
gc <- GCSSbyType %>% filter(GC.SS == "GC")
gc$pct <- gc$n/sum(gc$n)
ss <- GCSSbyType %>% filter(GC.SS == "SS")
ss$pct <- ss$n/sum(ss$n)
tbd <- GCSSbyType %>% filter(GC.SS == "TBD")
tbd$pct <- tbd$n/sum(tbd$n)
## For all 3 categories: GC, SS, TBD
GCSSbyType_ft <- fisher.test(matrix(c(gc$n,
ss$n,
tbd$n),
3,
6,
byrow=TRUE,
dimnames = list(classification=c("GC",
"SS",
"TBD"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
## For all 3 categories: GC, SS, TBD
GCSSbyType_ft_3 <- fisher.test(matrix(c(gc$n,
ss$n,
tbd$n),
3,
6,
byrow=TRUE,
dimnames = list(classification=c("GC",
"SS",
"TBD"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
## For all 2 categories: GC, SS
GCSSbyType_ft_2 <- fisher.test(matrix(c(gc$n,
ss$n),
2,
6,
byrow=TRUE,
dimnames = list(classification=c("GC",
"SS"),
mechanism=c("unknown",
"alteration",
"efflux",
"inactiviation",
"protection",
"replacement"))),
simulate.p.value = TRUE)
View(GCSSbyType_ft_3)
View(GCSSbyType_ft_3)
GCSSbyType_ft_3[["method"]]
View(GCSSbyType_ft_2)
