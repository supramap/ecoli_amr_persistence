#json.stream <- fromJSON("https://www.ncbi.nlm.nih.gov/pathogens/ngram?start=0&limit=1000000&q=%5Bdisplay()%2Chist(geo_loc_name%2Cisolation_source%2Ccollected_by%2Chost%2Cproperty%2Ctarget_creation_date)%5D.from(pathogen).usingschema(%2Fschema%2Fpathogen).matching(status%3D%3D%5B%22current%22%5D+and+q%3D%3D%22taxgroup_name%253A%2522E.coli%2520and%2520Shigella%2522%22).sort(target_creation_date%2Cdesc)&_search=false&rows=20&page=1&sidx=target_creation_date&sord=desc)")
#saveRDS(json.stream, file = "e.coli.RDS")
json.stream <- readRDS("e.coli.RDS")
amr.list <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
amr.strset <- lapply(amr.list, paste, collapse="|")
#names(amr.list) <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
#amr.list.raw[amr.list == "NULL"] <- NULL
#amr.all <- sort(unique(unlist(amr.list)))
names(amr.strset) <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
amr.strset[amr.strset == "NULL"] <- NULL
amr.strsets <- unique(unlist(amr.strset))
amr.strsets
library(readtext)
install.packages('readtext')
library(readtext)
tree.stream <- readtext("PDG000000004.1024.reference_target.tree.newick")
View(tree.stream)
system.file(".", package="readtext")
tree.stream <- readtext("./PDG000000004.1024.reference_target.tree.newick")
View(tree.stream)
tree.stream <- read.csv("PDG000000004.1024.reference_target.tree.newick")
View(tree.stream)
View(tree.stream)
rm(tree.stream)
amr.strsets == amr.strset[[1]]
(amr.strsets == amr.strset[[1]])*1
amr.binset <- amr.strset %>% ((amr.strsets == .)*1)
amr.binset <- ((amr.strsets == amr.strset)*1)
((amr.strsets == amr.strset)*1)
((amr.strsets == amr.strset[[1]])*1)
amr.binset <- paste((amr.strsets == amr.strset[[1]])*1, collapse = "")
paste((amr.strsets == amr.strset[[1]])*1, collapse = "")
amr.binset <- amr.strset %>% lapply(paste((amr.strsets == .)*1, collapse = ""))
amr.binset <- amr.strset %>% paste((amr.strsets == .)*1, collapse = "")
amr.strset %>% paste((amr.strsets == .)*1, collapse = "")
amr.binset <- lapply(amr.strset, function(x){paste((amr.strsets == x)*1, collapse = "")})
amr.binset
amr.strset[[1]]
amr.strset[1]
amr.binset[[1]]
amr.binset[1]
for
''
writeLines(names(amr.binset[1]), tree.file)
tree.file <- file("e.coli.tnt")
writeLines(names(amr.binset[1]), tree.file)
close(tree.file)
writeLines(names(amr.binset[[1]]), tree.file)
writeLines(amr.binset[[1]], tree.file)
tree.file <- file("e.coli.tnt")
writeLines(names(amr.binset[1]), tree.file)
writeLines(amr.binset[[1]], tree.file)
close(tree.file)
tree.file <- file("e.coli.tnt")
writeLines(names(amr.binset[1]), tree.file)
?writeLines
writeLine(names(amr.binset[1]), tree.file)
cat("", file="e.coli.tnt")
source('/Volumes/GoogleDrive/My Drive/research/AMR/src/Trees/tree.R', echo=TRUE)
cat(names(amr.binset[1]), file="e.coli.tnt", sep="\n", append=T)
cat(amr.binset[[1]], file="e.coli.tnt", sep="\n", append=T)
cat("", file="e.coli.tnt")
for (i in 1:length(amr.binset)) {
cat(names(amr.binset[i]), file="e.coli.tnt", sep="\n", append=T)
cat(amr.binset[[i]], file="e.coli.tnt", sep="\n", append=T)
}
setwd("/Volumes/GoogleDrive/My Drive/research/AMR/bsve2016/bsve2016/AMR_Analysis/GenotypeOnly/TNTFileGenerator")
#sed 's/'\)'*'\('*'\ '*PDT/,PDT/g' e.coli.paren | sed 's/^,//g' | sed 's/'\)'*;$//g' > e.coli.ids
#---------
##obsolete
#---------
#sed 's/$/~/
#:a
#s/\(PDT[0-9]*\.[0-9]\)\(.*~.*\)/\2,\1/
#ta
#s/^.*~//' PDG000000004.1024.reference_target.tree.newick > e.coli.ids
#---------
pdt <- unique(names(read.csv("e.coli.ids")))
#sed 's/'\)'*'\('*'\ '*PDT/,PDT/g' e.coli.paren | sed 's/^,//g' | sed 's/'\)'*;$//g' > e.coli.ids
#---------
##obsolete
#---------
#sed 's/$/~/
#:a
#s/\(PDT[0-9]*\.[0-9]\)\(.*~.*\)/\2,\1/
#ta
#s/^.*~//' PDG000000004.1024.reference_target.tree.newick > e.coli.ids
#---------
pdt <- unique(names(read.csv("e.coli.ids")))
#sed 's/'\)'*'\('*'\ '*PDT/,PDT/g' e.coli.paren | sed 's/^,//g' | sed 's/'\)'*;$//g' > e.coli.ids
#---------
##obsolete
#---------
#sed 's/$/~/
#:a
#s/\(PDT[0-9]*\.[0-9]\)\(.*~.*\)/\2,\1/
#ta
#s/^.*~//' PDG000000004.1024.reference_target.tree.newick > e.coli.ids
#---------
pdt <- unique(names(read.csv("e.coli.ids")))
#sed 's/'\)'*'\('*'\ '*PDT/,PDT/g' e.coli.paren | sed 's/^,//g' | sed 's/'\)'*;$//g' > e.coli.ids
#---------
##obsolete
#---------
#sed 's/$/~/
#:a
#s/\(PDT[0-9]*\.[0-9]\)\(.*~.*\)/\2,\1/
#ta
#s/^.*~//' PDG000000004.1024.reference_target.tree.newick > e.coli.ids
#---------
pdt <- unique(names(read.csv("e.coli.ids")))
library(jsonlite)
library(stringr)
setwd("/Volumes/GoogleDrive/My Drive/research/AMR/bsve2016/AMR_Analysis/GenotypeOnly/TNTFileGenerator")
#sed 's/'\)'*'\('*'\ '*PDT/,PDT/g' e.coli.paren | sed 's/^,//g' | sed 's/'\)'*;$//g' > e.coli.ids
#---------
##obsolete
#---------
#sed 's/$/~/
#:a
#s/\(PDT[0-9]*\.[0-9]\)\(.*~.*\)/\2,\1/
#ta
#s/^.*~//' PDG000000004.1024.reference_target.tree.newick > e.coli.ids
#---------
pdt <- unique(names(read.csv("e.coli.ids")))
#json.stream <- fromJSON("https://www.ncbi.nlm.nih.gov/pathogens/ngram?start=0&limit=1000000&q=%5Bdisplay()%2Chist(geo_loc_name%2Cisolation_source%2Ccollected_by%2Chost%2Cproperty%2Ctarget_creation_date)%5D.from(pathogen).usingschema(%2Fschema%2Fpathogen).matching(status%3D%3D%5B%22current%22%5D+and+q%3D%3D%22taxgroup_name%253A%2522E.coli%2520and%2520Shigella%2522%22).sort(target_creation_date%2Cdesc)&_search=false&rows=20&page=1&sidx=target_creation_date&sord=desc)")
#saveRDS(json.stream, file = "e.coli.RDS")
json.stream <- readRDS("e.coli.RDS")
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
genotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(genotypes) <- id
genotypes[!(names(genotypes) %in% pdt)] <- NULL
# ---------
# Genotypes
# ---------
genotypesall <- unique(unlist(genotypes))
genobins <- lapply(genotypes, function(x){paste((genotypesall %in% x) * 1, collapse = "")})
cat("mxram 800000", "xread", paste(c(length(genobins), length(genobinset)), collapse = " "), file = "e.coli.genotypes.tnt.head", sep = "\n")
cat("mxram 800000", "xread", paste(c(length(genobins), length(genotypes)), collapse = " "), file = "e.coli.genotypes.tnt.head", sep = "\n")
cat(as.vector(paste(names(genobins), unlist(genobins), sep = " ")), file = "e.coli.genotypes.tnt.head", sep = "\n", append = T)
cat(";", "tread", file = "e.coli.genotypes.tnt.head", sep = "\n", append = T)
cat(";", "", "cnames", file = "e.coli.genotypes.tnt.tail", sep = "\n")
for (i in 1:length(genotypesall)) {
cat(paste0("{", (i - 1), " 'genotype_", genotypesall[i], "' absent present;"), file = "e.coli.genotypes.tnt.tail", sep = "\n", append = T)
}
cat(";", "proc /;", file = "e.coli.genotypes.tnt.tail", sep = "\n", append = T)
system("cat e.coli.genotypes.tnt.head e.coli.paren e.coli.genotypes.tnt.tail > e.coli.genotypes.tnt")
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
creation_date <- json.stream[["ngout"]][["data"]][["content"]][["target_creation_date"]]
location <- json.stream[["ngout"]][["data"]][["content"]][["geo_loc_name"]]
isolation_type <- json.stream[["ngout"]][["data"]][["content"]][["epi_type"]]
genotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
df <- data.frame(id, creation_date, location, isolation_type, genotypes)
names(genotypes) <- id
genotypes[!(names(genotypes) %in% pdt)] <- NULL
df <- data.frame(id, creation_date, location, isolation_type)
df <- df[!(df$id %in% pdt)] <- NULL
df <- df[!(df$id %in% pdt),] <- NULL
df[!(df$id %in% pdt),]
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
creation_date <- as.date(json.stream[["ngout"]][["data"]][["content"]][["target_creation_date"]])
creation_date <- as.Date(json.stream[["ngout"]][["data"]][["content"]][["target_creation_date"]])
creation_date
json.stream <- fromJSON("https://www.ncbi.nlm.nih.gov/pathogens/ngram?start=0&limit=1000000&q=%5Bdisplay()%2Chist(geo_loc_name%2Cisolation_source%2Ccollected_by%2Chost%2Cproperty%2Ctarget_creation_date)%5D.from(pathogen).usingschema(%2Fschema%2Fpathogen).matching(status%3D%3D%5B%22current%22%5D+and+q%3D%3D%22taxgroup_name%253A%2522E.coli%2520and%2520Shigella%2522%22).sort(target_creation_date%2Casc)&_search=false&rows=20&page=1&sidx=target_creation_date&sord=asc)")
json.stream[["ngout"]][["data"]][["content"]][["target_creation_date"]]
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
creation_date_time <- as.POSIXct(json.stream[["ngout"]][["data"]][["content"]][["target_creation_date"]], format = "%Y-%m-%dT%H:%M:%SZ")
creation_date_time[1]
location <- json.stream[["ngout"]][["data"]][["content"]][["geo_loc_name"]]
isolation_type <- json.stream[["ngout"]][["data"]][["content"]][["epi_type"]]
genotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
df <- data.frame(id, creation_date, location, isolation_type)
df <- data.frame(id, creation_date_time, location, isolation_type)
rm(creation_date)
names(genotypes) <- id
genotypes[!(names(genotypes) %in% pdt)] <- NULL
df <- df[!(df$id %in% pdt),] <- NULL
df <- df[df$id %in% pdt,]
df <- data.frame(id, creation_date_time, location, isolation_type)
df[!(df$id %in% pdt),] <- NULL
df <- df[df$id %in% pdt,]
# ---------
# Genotypes
# ---------
genotypesall <- unique(unlist(genotypes))
genobins <- lapply(genotypes, function(x){paste((genotypesall %in% x) * 1, collapse = "")})
cat("mxram 800000", "xread", paste(c(length(genotypesall), length(genobins)), collapse = " "), file = "e.coli.genotypes.tnt.head", sep = "\n")
cat(as.vector(paste(names(genobins), unlist(genobins), sep = " ")), file = "e.coli.genotypes.tnt.head", sep = "\n", append = T)
cat(";", "tread", file = "e.coli.genotypes.tnt.head", sep = "\n", append = T)
cat(";", "", "cnames", file = "e.coli.genotypes.tnt.tail", sep = "\n")
for (i in 1:length(genotypesall)) {
cat(paste0("{", (i - 1), " 'genotype_", genotypesall[i], "' absent present;"), file = "e.coli.genotypes.tnt.tail", sep = "\n", append = T)
}
cat(";", "proc /;", file = "e.coli.genotypes.tnt.tail", sep = "\n", append = T)
system("cat e.coli.genotypes.tnt.head e.coli.paren e.coli.genotypes.tnt.tail > e.coli.genotypes.tnt")
# -------------
# Genotype Sets
# -------------
genotypeset <- lapply(genotypes, paste, collapse="_")
genotypesets <- unique(unlist(genotypeset))
genobinset <- lapply(genotypeset, function(x){paste((genotypesets == x) * 1, collapse = "")})
cat("mxram 800000", "xread", paste(c(length(genotypesets), length(genobinset)), collapse = " "), file = "e.coli.tnt.head", sep = "\n")
cat(as.vector(paste(names(genobinset), unlist(genobinset), sep = " ")), file = "e.coli.tnt.head", sep = "\n", append = T)
cat(";", "tread", file = "e.coli.tnt.head", sep = "\n", append = T)
cat(";", "", "cnames", file = "e.coli.tnt.tail", sep = "\n")
for (i in 1:length(genotypesets)) {
cat(paste0("{", (i - 1), " 'genotype_set_", genotypesets[i], "' absent present;"), file = "e.coli.tnt.tail", sep = "\n", append = T)
}
cat(";", "proc /;", file = "e.coli.tnt.tail", sep = "\n", append = T)
system("cat e.coli.tnt.head e.coli.paren e.coli.tnt.tail > e.coli.tnt")
setwd("/Volumes/GoogleDrive/My Drive/research/AMR/bsve2016/AMR_Analysis/GenotypeOnly/TNTFileGenerator")
system("cat e.coli.tnt.head e.coli.paren e.coli.tnt.tail > e.coli.tnt")
cat("mxram 800000", "xread", paste(c(length(genotypesall), length(genobins)), collapse = " "), file = "e.coli.genotypes.tnt.head", sep = "\n")
cat(as.vector(paste(names(genobins), unlist(genobins), sep = " ")), file = "e.coli.genotypes.tnt.head", sep = "\n", append = T)
cat(";", "tread", file = "e.coli.genotypes.tnt.head", sep = "\n", append = T)
cat(";", "", "cnames", file = "e.coli.genotypes.tnt.tail", sep = "\n")
for (i in 1:length(genotypesall)) {
cat(paste0("{", (i - 1), " 'genotype_", genotypesall[i], "' absent present;"), file = "e.coli.genotypes.tnt.tail", sep = "\n", append = T)
}
cat(";", "proc /;", file = "e.coli.genotypes.tnt.tail", sep = "\n", append = T)
system("cat e.coli.genotypes.tnt.head e.coli.paren e.coli.genotypes.tnt.tail > e.coli.genotypes.tnt")
cat("mxram 800000", "xread", paste(c(length(genotypesets), length(genobinset)), collapse = " "), file = "e.coli.tnt.head", sep = "\n")
cat(as.vector(paste(names(genobinset), unlist(genobinset), sep = " ")), file = "e.coli.tnt.head", sep = "\n", append = T)
cat(";", "tread", file = "e.coli.tnt.head", sep = "\n", append = T)
cat(";", "", "cnames", file = "e.coli.tnt.tail", sep = "\n")
for (i in 1:length(genotypesets)) {
cat(paste0("{", (i - 1), " 'genotype_set_", genotypesets[i], "' absent present;"), file = "e.coli.tnt.tail", sep = "\n", append = T)
}
cat(";", "proc /;", file = "e.coli.tnt.tail", sep = "\n", append = T)
system("cat e.coli.tnt.head e.coli.paren e.coli.tnt.tail > e.coli.tnt")
genobins
unlist(genobins)
write.csv(data.frame(df, unlist(genobins)))
write.csv(data.frame(df, unlist(genobins)))
write.csv(data.frame(df, unlist(genobins)), "e.coli.genotypes.meta.csv")
write.csv(data.frame(df, unlist(genobinset)), "e.coli.meta.csv")
library(gurobi)
?gurobi
model <- list()
model$modelsense <- "max"
model$obj <- c(1, 1, 2)
model$A <- matrix(c(1, 2, 3, -1, -1, 0), nrow = 2, byrow = TRUE)
model$sense <- rep("<=", 2)
model$rhs <- c(4, -1)
model$vtype <- rep("B", 3)
model
result <- gurobi(model)
result <- gurobi(model)
print("Solution:")
print(result$objval)
print(result$x)
library(jsonlite)
library(stringr)
library(glmnet)
library(MASS)
# Run these *nix commands
#sed 's/'\''//g' PDG000000004.1024.reference_target.tree.newick | sed 's/:-*[0-9]\.*[0-9]*\(e-[0-9]*\)*//g' | sed 's/,'\('/'\('/g' | sed 's/,/ /g' > e.coli.paren
#sed 's/'\)'*'\('*'\ '*PDT/,PDT/g' e.coli.paren | sed 's/^,//g' | sed 's/'\)'*;$//g' > e.coli.ids
#---------
pdt <- unique(names(read.csv("e.coli.ids")))
#json.stream <- fromJSON("https://www.ncbi.nlm.nih.gov/pathogens/ngram?start=0&limit=1000000&q=%5Bdisplay()%2Chist(geo_loc_name%2Cisolation_source%2Ccollected_by%2Chost%2Cproperty%2Ctarget_creation_date)%5D.from(pathogen).usingschema(%2Fschema%2Fpathogen).matching(status%3D%3D%5B%22current%22%5D+and+q%3D%3D%22taxgroup_name%253A%2522E.coli%2520and%2520Shigella%2522%22).sort(target_creation_date%2Casc)&_search=false&rows=20&page=1&sidx=target_creation_date&sord=asc)")
#saveRDS(json.stream, file = "e.coli.RDS")
json.stream <- readRDS("e.coli.RDS")
setwd("/Volumes/GoogleDrive/My Drive/research/AMR/bsve2016/AMR_Analysis/GenotypeOnly/MCR_Analysis")
# Run these *nix commands
#sed 's/'\''//g' PDG000000004.1024.reference_target.tree.newick | sed 's/:-*[0-9]\.*[0-9]*\(e-[0-9]*\)*//g' | sed 's/,'\('/'\('/g' | sed 's/,/ /g' > e.coli.paren
#sed 's/'\)'*'\('*'\ '*PDT/,PDT/g' e.coli.paren | sed 's/^,//g' | sed 's/'\)'*;$//g' > e.coli.ids
#---------
pdt <- unique(names(read.csv("e.coli.ids")))
#json.stream <- fromJSON("https://www.ncbi.nlm.nih.gov/pathogens/ngram?start=0&limit=1000000&q=%5Bdisplay()%2Chist(geo_loc_name%2Cisolation_source%2Ccollected_by%2Chost%2Cproperty%2Ctarget_creation_date)%5D.from(pathogen).usingschema(%2Fschema%2Fpathogen).matching(status%3D%3D%5B%22current%22%5D+and+q%3D%3D%22taxgroup_name%253A%2522E.coli%2520and%2520Shigella%2522%22).sort(target_creation_date%2Casc)&_search=false&rows=20&page=1&sidx=target_creation_date&sord=asc)")
#saveRDS(json.stream, file = "e.coli.RDS")
json.stream <- readRDS("e.coli.RDS")
id <- substr(json.stream[["ngout"]][["data"]][["content"]][["id"]], 19, 33)
creation_date_time <- as.POSIXct(json.stream[["ngout"]][["data"]][["content"]][["target_creation_date"]], format = "%Y-%m-%dT%H:%M:%SZ")
collection_year <- as.numeric(substr(json.stream[["ngout"]][["data"]][["content"]][["collection_date"]], 1, 4))
collection_year[is.na(collection_year)] <- as.numeric(format(creation_date_time[is.na(collection_year)], "%Y"))
location <- json.stream[["ngout"]][["data"]][["content"]][["geo_loc_name"]]
isolation_type <- json.stream[["ngout"]][["data"]][["content"]][["epi_type"]]
isolation_source <- json.stream[["ngout"]][["data"]][["content"]][["isolation_source"]]
fdf <- data.frame(id, creation_date_time, collection_year, location, isolation_type, isolation_source)
rdf <- fdf[fdf$id %in% pdt,]
fgenotypes <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(fgenotypes) <- id
rgenotypes <- fgenotypes
rgenotypes[!(names(fgenotypes) %in% pdt)] <- NULL
#fgenotypes[fgenotypes == "NULL"] <- NULL
#rgenotypes[rgenotypes == "NULL"] <- NULL
genotypes <- fgenotypes
# ---------
# Genotypes
# ---------
genotypesall <- unique(unlist(genotypes))
genobinv <- lapply(genotypes, function(x){(genotypesall %in% x) * 1})
gdf <- as.data.frame(matrix(unlist(genobinv), ncol = length(genotypesall), byrow = T))
names(gdf) <- genotypesall
gdf.mcr <- gdf[,-grep("mcr", names(gdf))]
gdf.mcr$mcr <- (rowSums(gdf[,grep("mcr", names(gdf))]) > 0) * 1
#model.null <- glm(mcr ~ 1, data = gdf.mcr, family = binomial)
#model.full <- glm(mcr ~ ., data = gdf.mcr, family = binomial)
#mixed <- step(model.null,
#              scope = list(lower = formula(model.null), upper = formula(model.full)),
#              direction = "forward")
x <- Matrix(as.matrix(gdf.mcr[,-which(names(gdf.mcr) == "mcr")]), sparse = T)
y <- Matrix(gdf.mcr$mcr, sparse = T)
#model.full <- glmnet(x = x, y = y, family = "binomial", lambda = 0)
model.cv <- cv.glmnet(x = x, y = y, family = "binomial", type.measure = "class")
#plot(model.cv)
#model.full <- glmnet(x = x, y = y, family = "binomial", lambda = model.cv$lambda.1se)
#model.full <- model.cv$glmnet.fit
#exp(cbind(Odds.Ratio=coef(model.full), Confidence.Interval=confint(model.full)))
coef.mcr <- coef(model.cv, s = "lambda.1se")
coef.mcr.names <- rownames(coef.mcr)
coef.mcr.nz <- Matrix(coef.mcr[coef.mcr != 0])
coef.mcr.nz <- sparseMatrix(coef.mcr[coef.mcr != 0])
rownames(coef.mcr.nz) <- coef.mcr.names[coef.mcr != 0]
exp(cbind(Odds.Ratio=coef.mcr))
#logistic.display(model.full)
coef.all <- c()
glm(genotypesall[1] ~ 1, data = gdf)
glm(genotypesall[1] ~ 1, family = "binomial", data = gdf)
glm(get(genotypesall[1]) ~ 1, family = "binomial", data = gdf)
genotypesall[1]
coef(glm(get(genotypesall[1]) ~ 1, family = "binomial", data = gdf))
for (g %in% genotypesall) {
coef.all[length(coef.all) + 1] <- coef(glm(get(g) ~ 1, family = "binomial", data = gdf))
}
for (g in genotypesall) {
coef.all[length(coef.all) + 1] <- coef(glm(get(g) ~ 1, family = "binomial", data = gdf))
}
names(coef.all) <- genotypesall
coef.all
coef.all[coef.all > 0]
coef.all[coef.all > -1]
coef.all[coef.all > -2]
coef.all[coef.all > -3]
coef.all[coef.all > -4]
t(coef.all)
list(coef.all)
as.list(coef.all)
write.csv(coef.all)
write.csv(coef.all, "logOddsRatio.csv")
write.csv(exp(coef.all), "oddsRatio.csv")
coef.all2 <- lapply(genotypesall, function(x){coef(glm(get(x) ~ 1, family = "binomial", data = gdf))})
coef.all2
coef.all2 <- unlist(coef.all2)
coef.all2
names(coef.all2) <- genotypesall
coef.all2
coef.all
exp(cbind(Odds.Ratio=coef.mcr))
# -------------
# Genotype Sets
# -------------
genotypeset <- lapply(genotypes, paste, collapse=":")
genotypesets <- unique(unlist(genotypeset))
genotypesets
model.full <- glm(mcr ~ ., data = gdf.mcr, family = binomial)
coef(model.full)
exp(model.full)
exp(cbind(Odds.Ratio=model.full))
rm(coef.all2)
rm(model.full)
f <- as.formula(mcr ~ .*.)
x <- model.matrix(f, gdf.mcr)[, -1]
?model.matrix
x <- Matrix(model.matrix(f, gdf.mcr)[, -1], sparse = T)
x <- Matrix(model.matrix(f, gdf.mcr)[, -1], sparse = T)
## Load in Packages
library(jsonlite)
library(stringr)
library(dplyr)
library(tidyr)
library(arules)
## Read in Data
json.stream <- readRDS("e.coli.RDS")
amr.list.raw <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(amr.list.raw) <- json.stream[["ngout"]][["data"]][["content"]][["id"]]
amr.list.raw[amr.list.raw == "NULL"] <- NULL
amr.all <- sort(unique(unlist(amr.list.raw)))
## Find all MCR variants
mcr.variants <- amr.all[str_detect(amr.all, "mcr-1|mcr-2")] %>%
sort(decreasing = TRUE) %>%
paste0(collapse = "|")
## Convert all mcr genotype variants to "mcr"
mcr.subset <- amr.list.raw %>%
lapply(., str_replace_all, pattern = mcr.variants, replacement = "mcr") %>%
lapply(., unique)
## Read in Data
json.stream <- readRDS("e.coli.RDS")
amr.list.raw <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(amr.list.raw) <- json.stream[["ngout"]][["data"]][["content"]][["id"]]
amr.list.raw[amr.list.raw == "NULL"] <- NULL
amr.all <- sort(unique(unlist(amr.list.raw)))
## Find all MCR variants
mcr.variants <- amr.all[str_detect(amr.all, "mcr-1|mcr-2")] %>%
sort(decreasing = TRUE) %>%
paste0(collapse = "|")
## Convert all mcr genotype variants to "mcr"
mcr.subset <- amr.list.raw %>%
lapply(., str_replace_all, pattern = mcr.variants, replacement = "mcr") %>%
lapply(., unique)
## Filter strains containing "mcr"
mcr.subset <- mcr.subset[unlist(lapply(mcr.subset, function(x){"mcr" %in% x}))]
View(mcr.subset)
genotypes <- sort(unique(unlist(mcr.subset)))
## Convert to transactions for the a priori algorithm
mcr.transactions <- as(mcr.subset, 'transactions')
100/length(genotypes)
mcr_rules<- apriori(mcr.transactions,
parameter = list(minlen = 2,
maxlen = 14,
support = 100/length(genotypes),
confidence =  0.5),
appearance = list(default = "none",
lhs = genotypes[which(genotypes != "mcr")],
rhs = "mcr"),
control = list(memopt = FALSE)
)
mcr_rules_df <- data.frame(
lhs = labels(lhs(mcr_rules)),
rhs = labels(rhs(mcr_rules)),
mcr_rules@quality
)
View(mcr_rules_df)
1/length(genotypes)
10/length(genotypes)
mcr_rules<- apriori(mcr.transactions,
parameter = list(minlen = 2,
maxlen = 14,
support = 10/length(genotypes),
confidence =  0.5),
appearance = list(default = "none",
lhs = genotypes[which(genotypes != "mcr")],
rhs = "mcr"),
control = list(memopt = FALSE)
)
mcr_rules_df <- data.frame(
lhs = labels(lhs(mcr_rules)),
rhs = labels(rhs(mcr_rules)),
mcr_rules@quality
)
200/167
(200/167)^-1
1-(200/length(genotypes))
mcr_rules<- apriori(mcr.transactions,
parameter = list(minlen = 2,
maxlen = 14,
support = (200/length(genotypes))-1,
confidence =  0.5),
appearance = list(default = "none",
lhs = genotypes[which(genotypes != "mcr")],
rhs = "mcr"),
control = list(memopt = FALSE)
)
mcr_rules_df <- data.frame(
lhs = labels(lhs(mcr_rules)),
rhs = labels(rhs(mcr_rules)),
mcr_rules@quality
)
# Remove brackets and convert all sets to lists
mcr_rules_df$lhs <- mcr_rules_df$lhs %>%
str_replace_all(c("\\{|\\}"),"")# %>%
mcr_rules_df$rhs <- mcr_rules_df$rhs %>%
str_replace_all(c("\\{|\\}"),"")
## Find all mcr variants
mcr.variants <- amr.all[str_detect(amr.all, "mcr-1|mcr-2")] %>%
sort(decreasing = TRUE) %>%
paste0(collapse = "|")
## Convert all mcr genotype variants to "mcr"
mcr.subset <- amr.list.raw %>%
lapply(., str_replace_all, pattern = mcr.variants, replacement = "mcr") %>%
lapply(., unique)
## Filter to strains containing "mcr"
mcr.subset <- mcr.subset[unlist(lapply(mcr.subset, function(x){"mcr" %in% x}))]
genotypes <- sort(unique(unlist(mcr.subset)))
## Convert to transactions for the a priori algorithm
mcr.transactions <- as(mcr.subset, 'transactions')
(200/length(genotypes))
1/167
1/160
200/167
1/167
-1
(1/167)-1
0.994012*2
(200/length(genotypes))-1
mcr_rules<- apriori(mcr.transactions,
parameter = list(minlen = 2,
maxlen = 14,
support = (200/length(genotypes))-1,
confidence =  0.5),
appearance = list(default = "none",
lhs = genotypes[which(genotypes != "mcr")],
rhs = "mcr"),
control = list(memopt = FALSE)
)
mcr_rules_df <- data.frame(
lhs = labels(lhs(mcr_rules)),
rhs = labels(rhs(mcr_rules)),
mcr_rules@quality
)
# Remove brackets and convert all sets to lists
mcr_rules_df$lhs <- mcr_rules_df$lhs %>%
str_replace_all(c("\\{|\\}"),"")# %>%
mcr_rules_df$rhs <- mcr_rules_df$rhs %>%
str_replace_all(c("\\{|\\}"),"")
## Write out the rules results
saveRDS(mcr_rules_df,
file = "mcr_rules.RDS")
write.csv(mcr_rules_df,
file = "mcr_rules.csv",
append = FALSE)
