View(isolatesizes)
colnames(isolatesizes) <- c("size")
isolatesizes <- isolate_sizes %>%
group_by("size") %>%
tally()
isolatesizes <- isolatesizes %>%
group_by("size") %>%
tally()
isolatesizes <- lapply(amr.list.raw, length) %>%
matrix() %>%
data.frame()
colnames(isolatesizes) <- c("size")
View(isolatesizes)
isolatesizes$size <- as.character(isolatesizes)
View(isolatesizes)
isolatesizes <- lapply(amr.list.raw, length) %>%
matrix() %>%
data.frame()
colnames(isolatesizes) <- c("size")
isolatesizes$size <- as.character(isolatesizes$size)
isolatesizes <- isolatesizes %>%
group_by("size") %>%
tally()
View(isolatesizes)
isolatesizes <- lapply(amr.list.raw, length) %>%
matrix() %>%
data.frame()
colnames(isolatesizes) <- c("size")
isolatesizes$size <- as.character(isolatesizes$size)
isolatesizes <- isolatesizes %>%
group_by("size") %>%
count()
View(isolatesizes)
isolatesizes <- lapply(amr.list.raw, length) %>%
matrix() %>%
data.frame()
colnames(isolatesizes) <- c("size")
isolatesizes$size <- as.character(isolatesizes$size)
isolatesizes <- isolatesizes %>%
add_count("size")
View(isolatesizes)
isolatesizes <- lapply(amr.list.raw, length) %>%
matrix() %>%
data.frame()
colnames(isolatesizes) <- c("size")
isolatesizes$size <- as.factor(isolatesizes$size)
isolatesizes$size <- as.factor(as.character(isolatesizes$size))
isolatesizes <- isolatesizes %>%
add_count("size")
View(isolatesizes)
isolatesizes <- isolatesizes %>%
add_count(size)
View(isolatesizes)
isolatesizes <- lapply(amr.list.raw, length) %>%
matrix() %>%
data.frame()
colnames(isolatesizes) <- c("size")
isolatesizes$size <- as.factor(as.character(isolatesizes$size))
isolatesizes <- isolatesizes %>%
group_by(size) %>%
tally()
View(isolatesizes)
isolatesizes <- isolatesizes %>%
group_by(size) %>%
tally() %>%
arrange()
isolatesizes <- lapply(amr.list.raw, length) %>%
matrix() %>%
data.frame()
colnames(isolatesizes) <- c("size")
isolatesizes$size <- as.factor(as.character(isolatesizes$size))
isolatesizes <- isolatesizes %>%
group_by(size) %>%
tally() %>%
arrange()
View(isolatesizes)
isolatesizes <- lapply(amr.list.raw, length) %>%
matrix() %>%
data.frame()
colnames(isolatesizes) <- c("size")
isolatesizes <- isolatesizes %>%
group_by(size) %>%
tally() %>%
arrange()
View(isolatesizes)
isolatesizes <- lapply(amr.list.raw, length) %>%
matrix() %>%
data.frame()
colnames(isolatesizes) <- c("size")
isolatesizes$size <- as.factor(as.character(isolatesizes$size))
isolatesizes <- isolatesizes %>%
group_by(size) %>%
tally()
isolatesizes$size <- as.numeric(isolatesizes$size)
isolatesizes <- isolatesizes %>%
arrange()
View(isolatesizes)
View(isolatesizes)
isolatesizes <- lapply(amr.list.raw, length) %>%
matrix() %>%
data.frame()
colnames(isolatesizes) <- c("size")
isolatesizes$size <- as.factor(as.character(isolatesizes$size))
isolatesizes <- isolatesizes %>%
group_by(size) %>%
tally()
isolatesizes$size <- as.numeric(isolatesizes$size)
isolatesizes <- isolatesizes %>%
arrange() %>%
filter(size <= max(rulesizes) & size >= min(rulesizes))
rulespace <- data.frame(rulesize = rulesizes,
isolatesize = isolatesizes)
View(rulespace)
rulespace <- data.frame(rulesize = rulesizes,
isolatesize = isolatesizes$n)
View(rulespace)
View(rulespace)
1815/57130
140/57130
## Create empty dataframe
mcr_rules_df <- data.frame(
lhs = character(0),
rhs = character(0),
size = numeric(0),
support = numeric(0),
confidence = numeric(0),
lift = numeric(0),
count = numeric(0)
)
for (i in 1:nrow(rulespace)){
## Get rule size and support metric for this iteration
size <- rulespace$rulesize[i]
numerator <- rulespace$isolatesize[i]
cat("Testing rules of size:", size, "\n")
## Generate MCR Rules
mcr_rules<- apriori(mcr.transactions,
parameter = list(minlen = size,
maxlen = size,
#support = 0.002,
#support = 5*(numerator/length(amr.list.raw)),
support = numerator/length(amr.list.raw),
confidence =  0.50,
maxtime = 60),
appearance = list(default = "none",
lhs = genotypes[which(genotypes != "mcr")],
rhs = "mcr"),
control = list(memopt = FALSE)
)
if (length(mcr_rules) > 0){
## Convert to dataframe
mcr_rules_df_iter <- data.frame(
lhs = labels(lhs(mcr_rules)),
rhs = labels(rhs(mcr_rules)),
size = size,
mcr_rules@quality
)
## Append this iterations's results to main dataframe
mcr_rules_df <- rbind(mcr_rules_df,
mcr_rules_df_iter)
}
}
## Remove brackets and convert all sets to lists
mcr_rules_df$lhs <- mcr_rules_df$lhs %>%
str_replace_all(c("\\{|\\}"),"") %>%
strsplit(split=",")
mcr_rules_df$rhs <- mcr_rules_df$rhs %>%
str_replace_all(c("\\{|\\}"),"")
View(rulespace)
for (i in 1:nrow(rulespace)){
## Get rule size and support metric for this iteration
size <- rulespace$rulesize[i]
numerator <- rulespace$isolatesize[i]
cat("Testing rules of size:", size, "\n")
## Generate MCR Rules
mcr_rules<- apriori(mcr.transactions,
parameter = list(minlen = size,
maxlen = size,
#support = 0.002,
#support = 5*(numerator/length(amr.list.raw)),
support = 0.1*(numerator/length(amr.list.raw)),
confidence =  0.50,
maxtime = 60),
appearance = list(default = "none",
lhs = genotypes[which(genotypes != "mcr")],
rhs = "mcr"),
control = list(memopt = FALSE)
)
if (length(mcr_rules) > 0){
## Convert to dataframe
mcr_rules_df_iter <- data.frame(
lhs = labels(lhs(mcr_rules)),
rhs = labels(rhs(mcr_rules)),
size = size,
mcr_rules@quality
)
## Append this iterations's results to main dataframe
mcr_rules_df <- rbind(mcr_rules_df,
mcr_rules_df_iter)
}
}
## Create empty dataframe
mcr_rules_df <- data.frame(
lhs = character(0),
rhs = character(0),
size = numeric(0),
support = numeric(0),
confidence = numeric(0),
lift = numeric(0),
count = numeric(0)
)
for (i in 1:nrow(rulespace)){
## Get rule size and support metric for this iteration
size <- rulespace$rulesize[i]
numerator <- rulespace$isolatesize[i]
cat("Testing rules of size:", size, "\n")
## Generate MCR Rules
mcr_rules<- apriori(mcr.transactions,
parameter = list(minlen = size,
maxlen = size,
#support = 0.002,
#support = 5*(numerator/length(amr.list.raw)),
support = 0.5*(numerator/length(amr.list.raw)),
confidence =  0.50,
maxtime = 60),
appearance = list(default = "none",
lhs = genotypes[which(genotypes != "mcr")],
rhs = "mcr"),
control = list(memopt = FALSE)
)
if (length(mcr_rules) > 0){
## Convert to dataframe
mcr_rules_df_iter <- data.frame(
lhs = labels(lhs(mcr_rules)),
rhs = labels(rhs(mcr_rules)),
size = size,
mcr_rules@quality
)
## Append this iterations's results to main dataframe
mcr_rules_df <- rbind(mcr_rules_df,
mcr_rules_df_iter)
}
}
## Remove brackets and convert all sets to lists
mcr_rules_df$lhs <- mcr_rules_df$lhs %>%
str_replace_all(c("\\{|\\}"),"") %>%
strsplit(split=",")
mcr_rules_df$rhs <- mcr_rules_df$rhs %>%
str_replace_all(c("\\{|\\}"),"")
View(mcr_rules_df)
## Create empty dataframe
mcr_rules_df <- data.frame(
lhs = character(0),
rhs = character(0),
size = numeric(0),
support = numeric(0),
confidence = numeric(0),
lift = numeric(0),
count = numeric(0)
)
for (i in 1:nrow(rulespace)){
## Get rule size and support metric for this iteration
size <- rulespace$rulesize[i]
numerator <- rulespace$isolatesize[i]
cat("Testing rules of size:", size, "\n")
## Generate MCR Rules
mcr_rules<- apriori(mcr.transactions,
parameter = list(minlen = size,
maxlen = size,
#support = 0.002,
#support = 5*(numerator/length(amr.list.raw)),
support = 0.4*(numerator/length(amr.list.raw)),
confidence =  0.50,
maxtime = 60),
appearance = list(default = "none",
lhs = genotypes[which(genotypes != "mcr")],
rhs = "mcr"),
control = list(memopt = FALSE)
)
if (length(mcr_rules) > 0){
## Convert to dataframe
mcr_rules_df_iter <- data.frame(
lhs = labels(lhs(mcr_rules)),
rhs = labels(rhs(mcr_rules)),
size = size,
mcr_rules@quality
)
## Append this iterations's results to main dataframe
mcr_rules_df <- rbind(mcr_rules_df,
mcr_rules_df_iter)
}
}
## Remove brackets and convert all sets to lists
mcr_rules_df$lhs <- mcr_rules_df$lhs %>%
str_replace_all(c("\\{|\\}"),"") %>%
strsplit(split=",")
mcr_rules_df$rhs <- mcr_rules_df$rhs %>%
str_replace_all(c("\\{|\\}"),"")
View(mcr_rules_df)
## Create empty dataframe
mcr_rules_df <- data.frame(
lhs = character(0),
rhs = character(0),
size = numeric(0),
support = numeric(0),
confidence = numeric(0),
lift = numeric(0),
count = numeric(0)
)
for (i in 1:nrow(rulespace)){
## Get rule size and support metric for this iteration
size <- rulespace$rulesize[i]
numerator <- rulespace$isolatesize[i]
cat("Testing rules of size:", size, "\n")
## Generate MCR Rules
mcr_rules<- apriori(mcr.transactions,
parameter = list(minlen = size,
maxlen = size,
#support = 0.002,
#support = 5*(numerator/length(amr.list.raw)),
support = 0.5*(numerator/length(amr.list.raw)),
confidence =  0.50,
maxtime = 120),
appearance = list(default = "none",
lhs = genotypes[which(genotypes != "mcr")],
rhs = "mcr"),
control = list(memopt = FALSE)
)
if (length(mcr_rules) > 0){
## Convert to dataframe
mcr_rules_df_iter <- data.frame(
lhs = labels(lhs(mcr_rules)),
rhs = labels(rhs(mcr_rules)),
size = size,
mcr_rules@quality
)
## Append this iterations's results to main dataframe
mcr_rules_df <- rbind(mcr_rules_df,
mcr_rules_df_iter)
}
}
## Remove brackets and convert all sets to lists
mcr_rules_df$lhs <- mcr_rules_df$lhs %>%
str_replace_all(c("\\{|\\}"),"") %>%
strsplit(split=",")
mcr_rules_df$rhs <- mcr_rules_df$rhs %>%
str_replace_all(c("\\{|\\}"),"")
View(mcr_rules_df)
## Write out the rules results
saveRDS(mcr_rules_df,
file = "mcr_rules.RDS")
View(mcr_rules_df)
View(mcr_rules_df)
plot(mcr_rules_df$confidence)
hist(mcr_rules_df$confidence)
hist(mcr_rules_df$support)
## Load in Packages
library(jsonlite)
library(stringr)
library(dplyr)
library(tidyr)
library(arules)
## Read in Data
json.stream <- readRDS("e.coli.RDS")
amr.list.raw <- json.stream[["ngout"]][["data"]][["content"]][["AMR_genotypes"]]
names(amr.list.raw) <- json.stream[["ngout"]][["data"]][["content"]][["id"]]
amr.list.raw[amr.list.raw == "NULL"] <- NULL
amr.all <- sort(unique(unlist(amr.list.raw)))
## Find all mcr variants
# mcr.variants <- amr.all[str_detect(amr.all, "mcr-1|mcr-2")] %>%
mcr.variants <- amr.all[str_detect(amr.all, "mcr-")] %>%
sort(decreasing = TRUE) %>%
paste0(collapse = "|")
## Convert all mcr genotype variants to "mcr"
mcr.subset <- amr.list.raw %>%
lapply(., str_replace_all, pattern = mcr.variants, replacement = "mcr") %>%
lapply(., unique) # Removes duplicate "mcr" genotypes from previous step
genotypes <- sort(unique(unlist(mcr.subset)))
## Convert to transactions for the a priori algorithm
mcr.transactions <- as(mcr.subset, 'transactions')
## Define rule sizes and isolate counts to explore
rulesizes <- seq(2, 14, by = 1)
isolatesizes <- lapply(amr.list.raw, length) %>%
matrix() %>%
data.frame()
colnames(isolatesizes) <- c("size")
isolatesizes$size <- as.factor(as.character(isolatesizes$size))
isolatesizes <- isolatesizes %>%
group_by(size) %>%
tally()
isolatesizes$size <- as.numeric(isolatesizes$size)
isolatesizes <- isolatesizes %>%
arrange() %>%
filter(size <= max(rulesizes) & size >= min(rulesizes))
rulespace <- data.frame(rulesize = rulesizes,
isolatesize = isolatesizes$n)
## Create empty dataframe
mcr_rules_df <- data.frame(
lhs = character(0),
rhs = character(0),
size = numeric(0),
support = numeric(0),
confidence = numeric(0),
lift = numeric(0),
count = numeric(0)
)
for (i in 1:nrow(rulespace)){
## Get rule size and support metric for this iteration
size <- rulespace$rulesize[i]
numerator <- rulespace$isolatesize[i]
cat("Testing rules of size:", size, "\n")
## Generate MCR Rules
mcr_rules<- apriori(mcr.transactions,
parameter = list(minlen = size,
maxlen = size,
#support = 0.002,
#support = 5*(numerator/length(amr.list.raw)),
support = 0.5*(numerator/length(amr.list.raw)),
confidence =  0.75,
maxtime = 60),
appearance = list(default = "none",
lhs = genotypes[which(genotypes != "mcr")],
rhs = "mcr"),
control = list(memopt = FALSE)
)
if (length(mcr_rules) > 0){
## Convert to dataframe
mcr_rules_df_iter <- data.frame(
lhs = labels(lhs(mcr_rules)),
rhs = labels(rhs(mcr_rules)),
size = size,
mcr_rules@quality
)
## Append this iterations's results to main dataframe
mcr_rules_df <- rbind(mcr_rules_df,
mcr_rules_df_iter)
}
}
## Remove brackets and convert all sets to lists
mcr_rules_df$lhs <- mcr_rules_df$lhs %>%
str_replace_all(c("\\{|\\}"),"") %>%
strsplit(split=",")
mcr_rules_df$rhs <- mcr_rules_df$rhs %>%
str_replace_all(c("\\{|\\}"),"")
View(mcr_rules_df)
hist(mcr_rules_df$confidence)
View(mcr.subset)
mcr.subset <- mcr.subset[unlist(lapply(mcr.subset, function(x){"mcr" %in% x}))]
818/57130
35/818
## Write out the rules results
saveRDS(mcr_rules_df,
file = "mcr_rules.RDS")
write.csv(mcr_rules_df,
file = "mcr_rules.csv",
append = FALSE)
View(mcr_rules_df)
## Convert all mcr genotype variants to "mcr"
mcr.subset <- amr.list.raw %>%
lapply(., str_replace_all, pattern = mcr.variants, replacement = "mcr") %>%
lapply(., unique) # Removes duplicate "mcr" genotypes from previous step
#############################
## Get PDTs that match rules
mcr_rules_df$lhs %in% mcr.subset
mcr.subset[["PDG000000004.1046_PDT000004786.2"]]
#############################
## Get PDTs that match rules
mcr_rules_df$lhs %in% mcr.subset[[1]]
mcr.subset[[1]]
#############################
## Get PDTs that match rules
mcr_rules_df$lhs %in% mcr.subset[["PDG000000004.1046_PDT000006338.2"]]
mcr.subset[["PDG000000004.1046_PDT000006338.2"]]
#############################
## Get PDTs that match rules
mcr_rules_df$lhs[1] %in% mcr.subset[["PDG000000004.1046_PDT000006338.2"]]
#############################
## Get PDTs that match rules
mcr_rules_df$lhs[1] %in% mcr.subset
#############################
## Get PDTs that match rules
lapply(mcr.subset, function(x){in(mcr_rules_df$lhs, x)})
#############################
## Get PDTs that match rules
lapply(mcr.subset, function(x){mcr_rules_df$lhs %in% x)})
#############################
## Get PDTs that match rules
lapply(mcr.subset, function(x){mcr_rules_df$lhs %in% x})
#############################
## Get PDTs that match rules
matches <- lapply(mcr.subset, function(x){mcr_rules_df$lhs[1] %in% x}) %>%
names()
matches
#############################
## Get PDTs that match rules
matches <- lapply(mcr.subset, function(x){mcr_rules_df$lhs[1] %in% x}) %>%
as.data.frame()
View(matches)
#############################
## Get PDTs that match rules
matches <- lapply(mcr.subset, function(x){mcr_rules_df$lhs[1] %in% x}) %>%
t() %>%
as.data.frame()
View(matches)
matches <- lapply(mcr.subset, function(x){mcr_rules_df$lhs[1] %in% x})
View(mcr_rules_df)
mcr_rules_df$lhs
floR.subset <- mcr.subset[unlist(lapply(mcr.subset, function(x){"floR" %in% x}))]
floRmcr.subset <- mcr.subset[unlist(lapply(mcr.subset, function(x){all("mcr","floR") %in% x}))]
floRmcr.subset <- mcr.subset[unlist(lapply(mcr.subset, function(x){all(c("mcr","floR") %in% x)}))]
View(mcr_rules_df$lhs)
View(as.data.frame(mcr_rules_df$lhs))
View(data.frame(mcr_rules_df$lhs))
